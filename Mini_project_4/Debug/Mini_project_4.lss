
Mini_project_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000028fe  00002992  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800078  00800078  000029aa  2**0
                  ALLOC
  3 .stab         00001ecc  00000000  00000000  000029ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001178  00000000  00000000  00004878  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000059f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a1ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aa78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__vector_6>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ee ef       	ldi	r30, 0xFE	; 254
     162:	f8 e2       	ldi	r31, 0x28	; 40
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a8 37       	cpi	r26, 0x78	; 120
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	a8 e7       	ldi	r26, 0x78	; 120
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	af 37       	cpi	r26, 0x7F	; 127
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 7f 11 	call	0x22fe	; 0x22fe <main>
     184:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	af e6       	ldi	r26, 0x6F	; 111
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8f e6       	ldi	r24, 0x6F	; 111
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6f e6       	ldi	r22, 0x6F	; 111
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 26 05 	call	0xa4c	; 0xa4c <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 73 06 	call	0xce6	; 0xce6 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__epilogue_restores__+0x20>

00000a4c <__pack_f>:
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	fc 01       	movw	r30, r24
     a58:	e4 80       	ldd	r14, Z+4	; 0x04
     a5a:	f5 80       	ldd	r15, Z+5	; 0x05
     a5c:	06 81       	ldd	r16, Z+6	; 0x06
     a5e:	17 81       	ldd	r17, Z+7	; 0x07
     a60:	d1 80       	ldd	r13, Z+1	; 0x01
     a62:	80 81       	ld	r24, Z
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	48 f4       	brcc	.+18     	; 0xa7a <__pack_f+0x2e>
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e1       	ldi	r26, 0x10	; 16
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e8 2a       	or	r14, r24
     a72:	f9 2a       	or	r15, r25
     a74:	0a 2b       	or	r16, r26
     a76:	1b 2b       	or	r17, r27
     a78:	a5 c0       	rjmp	.+330    	; 0xbc4 <__pack_f+0x178>
     a7a:	84 30       	cpi	r24, 0x04	; 4
     a7c:	09 f4       	brne	.+2      	; 0xa80 <__pack_f+0x34>
     a7e:	9f c0       	rjmp	.+318    	; 0xbbe <__pack_f+0x172>
     a80:	82 30       	cpi	r24, 0x02	; 2
     a82:	21 f4       	brne	.+8      	; 0xa8c <__pack_f+0x40>
     a84:	ee 24       	eor	r14, r14
     a86:	ff 24       	eor	r15, r15
     a88:	87 01       	movw	r16, r14
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <__pack_f+0x4a>
     a8c:	e1 14       	cp	r14, r1
     a8e:	f1 04       	cpc	r15, r1
     a90:	01 05       	cpc	r16, r1
     a92:	11 05       	cpc	r17, r1
     a94:	19 f4       	brne	.+6      	; 0xa9c <__pack_f+0x50>
     a96:	e0 e0       	ldi	r30, 0x00	; 0
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	96 c0       	rjmp	.+300    	; 0xbc8 <__pack_f+0x17c>
     a9c:	62 81       	ldd	r22, Z+2	; 0x02
     a9e:	73 81       	ldd	r23, Z+3	; 0x03
     aa0:	9f ef       	ldi	r25, 0xFF	; 255
     aa2:	62 38       	cpi	r22, 0x82	; 130
     aa4:	79 07       	cpc	r23, r25
     aa6:	0c f0       	brlt	.+2      	; 0xaaa <__pack_f+0x5e>
     aa8:	5b c0       	rjmp	.+182    	; 0xb60 <__pack_f+0x114>
     aaa:	22 e8       	ldi	r18, 0x82	; 130
     aac:	3f ef       	ldi	r19, 0xFF	; 255
     aae:	26 1b       	sub	r18, r22
     ab0:	37 0b       	sbc	r19, r23
     ab2:	2a 31       	cpi	r18, 0x1A	; 26
     ab4:	31 05       	cpc	r19, r1
     ab6:	2c f0       	brlt	.+10     	; 0xac2 <__pack_f+0x76>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	2a c0       	rjmp	.+84     	; 0xb16 <__pack_f+0xca>
     ac2:	b8 01       	movw	r22, r16
     ac4:	a7 01       	movw	r20, r14
     ac6:	02 2e       	mov	r0, r18
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__pack_f+0x86>
     aca:	76 95       	lsr	r23
     acc:	67 95       	ror	r22
     ace:	57 95       	ror	r21
     ad0:	47 95       	ror	r20
     ad2:	0a 94       	dec	r0
     ad4:	d2 f7       	brpl	.-12     	; 0xaca <__pack_f+0x7e>
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <__pack_f+0x9c>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	aa 1f       	adc	r26, r26
     ae6:	bb 1f       	adc	r27, r27
     ae8:	2a 95       	dec	r18
     aea:	d2 f7       	brpl	.-12     	; 0xae0 <__pack_f+0x94>
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	a1 09       	sbc	r26, r1
     af0:	b1 09       	sbc	r27, r1
     af2:	8e 21       	and	r24, r14
     af4:	9f 21       	and	r25, r15
     af6:	a0 23       	and	r26, r16
     af8:	b1 23       	and	r27, r17
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	21 f0       	breq	.+8      	; 0xb0a <__pack_f+0xbe>
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	9a 01       	movw	r18, r20
     b0c:	ab 01       	movw	r20, r22
     b0e:	28 2b       	or	r18, r24
     b10:	39 2b       	or	r19, r25
     b12:	4a 2b       	or	r20, r26
     b14:	5b 2b       	or	r21, r27
     b16:	da 01       	movw	r26, r20
     b18:	c9 01       	movw	r24, r18
     b1a:	8f 77       	andi	r24, 0x7F	; 127
     b1c:	90 70       	andi	r25, 0x00	; 0
     b1e:	a0 70       	andi	r26, 0x00	; 0
     b20:	b0 70       	andi	r27, 0x00	; 0
     b22:	80 34       	cpi	r24, 0x40	; 64
     b24:	91 05       	cpc	r25, r1
     b26:	a1 05       	cpc	r26, r1
     b28:	b1 05       	cpc	r27, r1
     b2a:	39 f4       	brne	.+14     	; 0xb3a <__pack_f+0xee>
     b2c:	27 ff       	sbrs	r18, 7
     b2e:	09 c0       	rjmp	.+18     	; 0xb42 <__pack_f+0xf6>
     b30:	20 5c       	subi	r18, 0xC0	; 192
     b32:	3f 4f       	sbci	r19, 0xFF	; 255
     b34:	4f 4f       	sbci	r20, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__pack_f+0xf6>
     b3a:	21 5c       	subi	r18, 0xC1	; 193
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	4f 4f       	sbci	r20, 0xFF	; 255
     b40:	5f 4f       	sbci	r21, 0xFF	; 255
     b42:	e0 e0       	ldi	r30, 0x00	; 0
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	20 30       	cpi	r18, 0x00	; 0
     b48:	a0 e0       	ldi	r26, 0x00	; 0
     b4a:	3a 07       	cpc	r19, r26
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	4a 07       	cpc	r20, r26
     b50:	a0 e4       	ldi	r26, 0x40	; 64
     b52:	5a 07       	cpc	r21, r26
     b54:	10 f0       	brcs	.+4      	; 0xb5a <__pack_f+0x10e>
     b56:	e1 e0       	ldi	r30, 0x01	; 1
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	79 01       	movw	r14, r18
     b5c:	8a 01       	movw	r16, r20
     b5e:	27 c0       	rjmp	.+78     	; 0xbae <__pack_f+0x162>
     b60:	60 38       	cpi	r22, 0x80	; 128
     b62:	71 05       	cpc	r23, r1
     b64:	64 f5       	brge	.+88     	; 0xbbe <__pack_f+0x172>
     b66:	fb 01       	movw	r30, r22
     b68:	e1 58       	subi	r30, 0x81	; 129
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	d8 01       	movw	r26, r16
     b6e:	c7 01       	movw	r24, r14
     b70:	8f 77       	andi	r24, 0x7F	; 127
     b72:	90 70       	andi	r25, 0x00	; 0
     b74:	a0 70       	andi	r26, 0x00	; 0
     b76:	b0 70       	andi	r27, 0x00	; 0
     b78:	80 34       	cpi	r24, 0x40	; 64
     b7a:	91 05       	cpc	r25, r1
     b7c:	a1 05       	cpc	r26, r1
     b7e:	b1 05       	cpc	r27, r1
     b80:	39 f4       	brne	.+14     	; 0xb90 <__pack_f+0x144>
     b82:	e7 fe       	sbrs	r14, 7
     b84:	0d c0       	rjmp	.+26     	; 0xba0 <__pack_f+0x154>
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__pack_f+0x14c>
     b90:	8f e3       	ldi	r24, 0x3F	; 63
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e8 0e       	add	r14, r24
     b9a:	f9 1e       	adc	r15, r25
     b9c:	0a 1f       	adc	r16, r26
     b9e:	1b 1f       	adc	r17, r27
     ba0:	17 ff       	sbrs	r17, 7
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <__pack_f+0x162>
     ba4:	16 95       	lsr	r17
     ba6:	07 95       	ror	r16
     ba8:	f7 94       	ror	r15
     baa:	e7 94       	ror	r14
     bac:	31 96       	adiw	r30, 0x01	; 1
     bae:	87 e0       	ldi	r24, 0x07	; 7
     bb0:	16 95       	lsr	r17
     bb2:	07 95       	ror	r16
     bb4:	f7 94       	ror	r15
     bb6:	e7 94       	ror	r14
     bb8:	8a 95       	dec	r24
     bba:	d1 f7       	brne	.-12     	; 0xbb0 <__pack_f+0x164>
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <__pack_f+0x17c>
     bbe:	ee 24       	eor	r14, r14
     bc0:	ff 24       	eor	r15, r15
     bc2:	87 01       	movw	r16, r14
     bc4:	ef ef       	ldi	r30, 0xFF	; 255
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	6e 2f       	mov	r22, r30
     bca:	67 95       	ror	r22
     bcc:	66 27       	eor	r22, r22
     bce:	67 95       	ror	r22
     bd0:	90 2f       	mov	r25, r16
     bd2:	9f 77       	andi	r25, 0x7F	; 127
     bd4:	d7 94       	ror	r13
     bd6:	dd 24       	eor	r13, r13
     bd8:	d7 94       	ror	r13
     bda:	8e 2f       	mov	r24, r30
     bdc:	86 95       	lsr	r24
     bde:	49 2f       	mov	r20, r25
     be0:	46 2b       	or	r20, r22
     be2:	58 2f       	mov	r21, r24
     be4:	5d 29       	or	r21, r13
     be6:	b7 01       	movw	r22, r14
     be8:	ca 01       	movw	r24, r20
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	08 95       	ret

00000bf6 <__unpack_f>:
     bf6:	fc 01       	movw	r30, r24
     bf8:	db 01       	movw	r26, r22
     bfa:	40 81       	ld	r20, Z
     bfc:	51 81       	ldd	r21, Z+1	; 0x01
     bfe:	22 81       	ldd	r18, Z+2	; 0x02
     c00:	62 2f       	mov	r22, r18
     c02:	6f 77       	andi	r22, 0x7F	; 127
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	22 1f       	adc	r18, r18
     c08:	22 27       	eor	r18, r18
     c0a:	22 1f       	adc	r18, r18
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	89 2f       	mov	r24, r25
     c10:	88 0f       	add	r24, r24
     c12:	82 2b       	or	r24, r18
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	99 1f       	adc	r25, r25
     c1a:	99 27       	eor	r25, r25
     c1c:	99 1f       	adc	r25, r25
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	9c 93       	st	X, r25
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	21 15       	cp	r18, r1
     c26:	31 05       	cpc	r19, r1
     c28:	a9 f5       	brne	.+106    	; 0xc94 <__unpack_f+0x9e>
     c2a:	41 15       	cp	r20, r1
     c2c:	51 05       	cpc	r21, r1
     c2e:	61 05       	cpc	r22, r1
     c30:	71 05       	cpc	r23, r1
     c32:	11 f4       	brne	.+4      	; 0xc38 <__unpack_f+0x42>
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	37 c0       	rjmp	.+110    	; 0xca6 <__unpack_f+0xb0>
     c38:	82 e8       	ldi	r24, 0x82	; 130
     c3a:	9f ef       	ldi	r25, 0xFF	; 255
     c3c:	13 96       	adiw	r26, 0x03	; 3
     c3e:	9c 93       	st	X, r25
     c40:	8e 93       	st	-X, r24
     c42:	12 97       	sbiw	r26, 0x02	; 2
     c44:	9a 01       	movw	r18, r20
     c46:	ab 01       	movw	r20, r22
     c48:	67 e0       	ldi	r22, 0x07	; 7
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	44 1f       	adc	r20, r20
     c50:	55 1f       	adc	r21, r21
     c52:	6a 95       	dec	r22
     c54:	d1 f7       	brne	.-12     	; 0xc4a <__unpack_f+0x54>
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	8c 93       	st	X, r24
     c5a:	0d c0       	rjmp	.+26     	; 0xc76 <__unpack_f+0x80>
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
     c60:	44 1f       	adc	r20, r20
     c62:	55 1f       	adc	r21, r21
     c64:	12 96       	adiw	r26, 0x02	; 2
     c66:	8d 91       	ld	r24, X+
     c68:	9c 91       	ld	r25, X
     c6a:	13 97       	sbiw	r26, 0x03	; 3
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	13 96       	adiw	r26, 0x03	; 3
     c70:	9c 93       	st	X, r25
     c72:	8e 93       	st	-X, r24
     c74:	12 97       	sbiw	r26, 0x02	; 2
     c76:	20 30       	cpi	r18, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	38 07       	cpc	r19, r24
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	48 07       	cpc	r20, r24
     c80:	80 e4       	ldi	r24, 0x40	; 64
     c82:	58 07       	cpc	r21, r24
     c84:	58 f3       	brcs	.-42     	; 0xc5c <__unpack_f+0x66>
     c86:	14 96       	adiw	r26, 0x04	; 4
     c88:	2d 93       	st	X+, r18
     c8a:	3d 93       	st	X+, r19
     c8c:	4d 93       	st	X+, r20
     c8e:	5c 93       	st	X, r21
     c90:	17 97       	sbiw	r26, 0x07	; 7
     c92:	08 95       	ret
     c94:	2f 3f       	cpi	r18, 0xFF	; 255
     c96:	31 05       	cpc	r19, r1
     c98:	79 f4       	brne	.+30     	; 0xcb8 <__unpack_f+0xc2>
     c9a:	41 15       	cp	r20, r1
     c9c:	51 05       	cpc	r21, r1
     c9e:	61 05       	cpc	r22, r1
     ca0:	71 05       	cpc	r23, r1
     ca2:	19 f4       	brne	.+6      	; 0xcaa <__unpack_f+0xb4>
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	8c 93       	st	X, r24
     ca8:	08 95       	ret
     caa:	64 ff       	sbrs	r22, 4
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <__unpack_f+0xbe>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	8c 93       	st	X, r24
     cb2:	12 c0       	rjmp	.+36     	; 0xcd8 <__unpack_f+0xe2>
     cb4:	1c 92       	st	X, r1
     cb6:	10 c0       	rjmp	.+32     	; 0xcd8 <__unpack_f+0xe2>
     cb8:	2f 57       	subi	r18, 0x7F	; 127
     cba:	30 40       	sbci	r19, 0x00	; 0
     cbc:	13 96       	adiw	r26, 0x03	; 3
     cbe:	3c 93       	st	X, r19
     cc0:	2e 93       	st	-X, r18
     cc2:	12 97       	sbiw	r26, 0x02	; 2
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	8c 93       	st	X, r24
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	44 0f       	add	r20, r20
     ccc:	55 1f       	adc	r21, r21
     cce:	66 1f       	adc	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	8a 95       	dec	r24
     cd4:	d1 f7       	brne	.-12     	; 0xcca <__unpack_f+0xd4>
     cd6:	70 64       	ori	r23, 0x40	; 64
     cd8:	14 96       	adiw	r26, 0x04	; 4
     cda:	4d 93       	st	X+, r20
     cdc:	5d 93       	st	X+, r21
     cde:	6d 93       	st	X+, r22
     ce0:	7c 93       	st	X, r23
     ce2:	17 97       	sbiw	r26, 0x07	; 7
     ce4:	08 95       	ret

00000ce6 <__fpcmp_parts_f>:
     ce6:	1f 93       	push	r17
     ce8:	dc 01       	movw	r26, r24
     cea:	fb 01       	movw	r30, r22
     cec:	9c 91       	ld	r25, X
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	08 f4       	brcc	.+2      	; 0xcf4 <__fpcmp_parts_f+0xe>
     cf2:	47 c0       	rjmp	.+142    	; 0xd82 <__fpcmp_parts_f+0x9c>
     cf4:	80 81       	ld	r24, Z
     cf6:	82 30       	cpi	r24, 0x02	; 2
     cf8:	08 f4       	brcc	.+2      	; 0xcfc <__fpcmp_parts_f+0x16>
     cfa:	43 c0       	rjmp	.+134    	; 0xd82 <__fpcmp_parts_f+0x9c>
     cfc:	94 30       	cpi	r25, 0x04	; 4
     cfe:	51 f4       	brne	.+20     	; 0xd14 <__fpcmp_parts_f+0x2e>
     d00:	11 96       	adiw	r26, 0x01	; 1
     d02:	1c 91       	ld	r17, X
     d04:	84 30       	cpi	r24, 0x04	; 4
     d06:	99 f5       	brne	.+102    	; 0xd6e <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	68 2f       	mov	r22, r24
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	61 1b       	sub	r22, r17
     d10:	71 09       	sbc	r23, r1
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <__fpcmp_parts_f+0xac>
     d14:	84 30       	cpi	r24, 0x04	; 4
     d16:	21 f0       	breq	.+8      	; 0xd20 <__fpcmp_parts_f+0x3a>
     d18:	92 30       	cpi	r25, 0x02	; 2
     d1a:	31 f4       	brne	.+12     	; 0xd28 <__fpcmp_parts_f+0x42>
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	b9 f1       	breq	.+110    	; 0xd8e <__fpcmp_parts_f+0xa8>
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	88 23       	and	r24, r24
     d24:	89 f1       	breq	.+98     	; 0xd88 <__fpcmp_parts_f+0xa2>
     d26:	2d c0       	rjmp	.+90     	; 0xd82 <__fpcmp_parts_f+0x9c>
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	1c 91       	ld	r17, X
     d2c:	11 97       	sbiw	r26, 0x01	; 1
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	f1 f0       	breq	.+60     	; 0xd6e <__fpcmp_parts_f+0x88>
     d32:	81 81       	ldd	r24, Z+1	; 0x01
     d34:	18 17       	cp	r17, r24
     d36:	d9 f4       	brne	.+54     	; 0xd6e <__fpcmp_parts_f+0x88>
     d38:	12 96       	adiw	r26, 0x02	; 2
     d3a:	2d 91       	ld	r18, X+
     d3c:	3c 91       	ld	r19, X
     d3e:	13 97       	sbiw	r26, 0x03	; 3
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	82 17       	cp	r24, r18
     d46:	93 07       	cpc	r25, r19
     d48:	94 f0       	brlt	.+36     	; 0xd6e <__fpcmp_parts_f+0x88>
     d4a:	28 17       	cp	r18, r24
     d4c:	39 07       	cpc	r19, r25
     d4e:	bc f0       	brlt	.+46     	; 0xd7e <__fpcmp_parts_f+0x98>
     d50:	14 96       	adiw	r26, 0x04	; 4
     d52:	8d 91       	ld	r24, X+
     d54:	9d 91       	ld	r25, X+
     d56:	0d 90       	ld	r0, X+
     d58:	bc 91       	ld	r27, X
     d5a:	a0 2d       	mov	r26, r0
     d5c:	24 81       	ldd	r18, Z+4	; 0x04
     d5e:	35 81       	ldd	r19, Z+5	; 0x05
     d60:	46 81       	ldd	r20, Z+6	; 0x06
     d62:	57 81       	ldd	r21, Z+7	; 0x07
     d64:	28 17       	cp	r18, r24
     d66:	39 07       	cpc	r19, r25
     d68:	4a 07       	cpc	r20, r26
     d6a:	5b 07       	cpc	r21, r27
     d6c:	18 f4       	brcc	.+6      	; 0xd74 <__fpcmp_parts_f+0x8e>
     d6e:	11 23       	and	r17, r17
     d70:	41 f0       	breq	.+16     	; 0xd82 <__fpcmp_parts_f+0x9c>
     d72:	0a c0       	rjmp	.+20     	; 0xd88 <__fpcmp_parts_f+0xa2>
     d74:	82 17       	cp	r24, r18
     d76:	93 07       	cpc	r25, r19
     d78:	a4 07       	cpc	r26, r20
     d7a:	b5 07       	cpc	r27, r21
     d7c:	40 f4       	brcc	.+16     	; 0xd8e <__fpcmp_parts_f+0xa8>
     d7e:	11 23       	and	r17, r17
     d80:	19 f0       	breq	.+6      	; 0xd88 <__fpcmp_parts_f+0xa2>
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <__fpcmp_parts_f+0xac>
     d88:	6f ef       	ldi	r22, 0xFF	; 255
     d8a:	7f ef       	ldi	r23, 0xFF	; 255
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <__fpcmp_parts_f+0xac>
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	cb 01       	movw	r24, r22
     d94:	1f 91       	pop	r17
     d96:	08 95       	ret

00000d98 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <GPIO_setupPinDirection+0x6>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <GPIO_setupPinDirection+0x8>
     da0:	0f 92       	push	r0
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	6a 83       	std	Y+2, r22	; 0x02
     daa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	88 30       	cpi	r24, 0x08	; 8
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <GPIO_setupPinDirection+0x1c>
     db2:	d5 c0       	rjmp	.+426    	; 0xf5e <GPIO_setupPinDirection+0x1c6>
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	84 30       	cpi	r24, 0x04	; 4
     db8:	08 f0       	brcs	.+2      	; 0xdbc <GPIO_setupPinDirection+0x24>
     dba:	d1 c0       	rjmp	.+418    	; 0xf5e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3d 83       	std	Y+5, r19	; 0x05
     dc4:	2c 83       	std	Y+4, r18	; 0x04
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	91 05       	cpc	r25, r1
     dce:	09 f4       	brne	.+2      	; 0xdd2 <GPIO_setupPinDirection+0x3a>
     dd0:	43 c0       	rjmp	.+134    	; 0xe58 <GPIO_setupPinDirection+0xc0>
     dd2:	2c 81       	ldd	r18, Y+4	; 0x04
     dd4:	3d 81       	ldd	r19, Y+5	; 0x05
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	2c f4       	brge	.+10     	; 0xde6 <GPIO_setupPinDirection+0x4e>
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	9d 81       	ldd	r25, Y+5	; 0x05
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	71 f0       	breq	.+28     	; 0xe00 <GPIO_setupPinDirection+0x68>
     de4:	bc c0       	rjmp	.+376    	; 0xf5e <GPIO_setupPinDirection+0x1c6>
     de6:	2c 81       	ldd	r18, Y+4	; 0x04
     de8:	3d 81       	ldd	r19, Y+5	; 0x05
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	09 f4       	brne	.+2      	; 0xdf2 <GPIO_setupPinDirection+0x5a>
     df0:	5f c0       	rjmp	.+190    	; 0xeb0 <GPIO_setupPinDirection+0x118>
     df2:	8c 81       	ldd	r24, Y+4	; 0x04
     df4:	9d 81       	ldd	r25, Y+5	; 0x05
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	91 05       	cpc	r25, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <GPIO_setupPinDirection+0x66>
     dfc:	85 c0       	rjmp	.+266    	; 0xf08 <GPIO_setupPinDirection+0x170>
     dfe:	af c0       	rjmp	.+350    	; 0xf5e <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	a1 f4       	brne	.+40     	; 0xe2e <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
     e06:	aa e3       	ldi	r26, 0x3A	; 58
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ea e3       	ldi	r30, 0x3A	; 58
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <GPIO_setupPinDirection+0x8c>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <GPIO_setupPinDirection+0x88>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	98 c0       	rjmp	.+304    	; 0xf5e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
     e2e:	aa e3       	ldi	r26, 0x3A	; 58
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	ea e3       	ldi	r30, 0x3A	; 58
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <GPIO_setupPinDirection+0xb4>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <GPIO_setupPinDirection+0xb0>
     e50:	80 95       	com	r24
     e52:	84 23       	and	r24, r20
     e54:	8c 93       	st	X, r24
     e56:	83 c0       	rjmp	.+262    	; 0xf5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	a1 f4       	brne	.+40     	; 0xe86 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
     e5e:	a7 e3       	ldi	r26, 0x37	; 55
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e7 e3       	ldi	r30, 0x37	; 55
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <GPIO_setupPinDirection+0xe4>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <GPIO_setupPinDirection+0xe0>
     e80:	84 2b       	or	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	6c c0       	rjmp	.+216    	; 0xf5e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
     e86:	a7 e3       	ldi	r26, 0x37	; 55
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e7 e3       	ldi	r30, 0x37	; 55
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <GPIO_setupPinDirection+0x10c>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <GPIO_setupPinDirection+0x108>
     ea8:	80 95       	com	r24
     eaa:	84 23       	and	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	57 c0       	rjmp	.+174    	; 0xf5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	a1 f4       	brne	.+40     	; 0xede <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
     eb6:	a4 e3       	ldi	r26, 0x34	; 52
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e4 e3       	ldi	r30, 0x34	; 52
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <GPIO_setupPinDirection+0x13c>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <GPIO_setupPinDirection+0x138>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	40 c0       	rjmp	.+128    	; 0xf5e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
     ede:	a4 e3       	ldi	r26, 0x34	; 52
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e4 e3       	ldi	r30, 0x34	; 52
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <GPIO_setupPinDirection+0x164>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <GPIO_setupPinDirection+0x160>
     f00:	80 95       	com	r24
     f02:	84 23       	and	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	2b c0       	rjmp	.+86     	; 0xf5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	a1 f4       	brne	.+40     	; 0xf36 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
     f0e:	a1 e3       	ldi	r26, 0x31	; 49
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <GPIO_setupPinDirection+0x194>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <GPIO_setupPinDirection+0x190>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	14 c0       	rjmp	.+40     	; 0xf5e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
     f36:	a1 e3       	ldi	r26, 0x31	; 49
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e1 e3       	ldi	r30, 0x31	; 49
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <GPIO_setupPinDirection+0x1bc>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <GPIO_setupPinDirection+0x1b8>
     f58:	80 95       	com	r24
     f5a:	84 23       	and	r24, r20
     f5c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <GPIO_writePin+0x6>
     f74:	00 d0       	rcall	.+0      	; 0xf76 <GPIO_writePin+0x8>
     f76:	0f 92       	push	r0
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	6a 83       	std	Y+2, r22	; 0x02
     f80:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	88 30       	cpi	r24, 0x08	; 8
     f86:	08 f0       	brcs	.+2      	; 0xf8a <GPIO_writePin+0x1c>
     f88:	d5 c0       	rjmp	.+426    	; 0x1134 <GPIO_writePin+0x1c6>
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	84 30       	cpi	r24, 0x04	; 4
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <GPIO_writePin+0x24>
     f90:	d1 c0       	rjmp	.+418    	; 0x1134 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* Write the pin value as required */
		switch (port_num) {
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	3d 83       	std	Y+5, r19	; 0x05
     f9a:	2c 83       	std	Y+4, r18	; 0x04
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <GPIO_writePin+0x3a>
     fa6:	43 c0       	rjmp	.+134    	; 0x102e <GPIO_writePin+0xc0>
     fa8:	2c 81       	ldd	r18, Y+4	; 0x04
     faa:	3d 81       	ldd	r19, Y+5	; 0x05
     fac:	22 30       	cpi	r18, 0x02	; 2
     fae:	31 05       	cpc	r19, r1
     fb0:	2c f4       	brge	.+10     	; 0xfbc <GPIO_writePin+0x4e>
     fb2:	8c 81       	ldd	r24, Y+4	; 0x04
     fb4:	9d 81       	ldd	r25, Y+5	; 0x05
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	71 f0       	breq	.+28     	; 0xfd6 <GPIO_writePin+0x68>
     fba:	bc c0       	rjmp	.+376    	; 0x1134 <GPIO_writePin+0x1c6>
     fbc:	2c 81       	ldd	r18, Y+4	; 0x04
     fbe:	3d 81       	ldd	r19, Y+5	; 0x05
     fc0:	22 30       	cpi	r18, 0x02	; 2
     fc2:	31 05       	cpc	r19, r1
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <GPIO_writePin+0x5a>
     fc6:	5f c0       	rjmp	.+190    	; 0x1086 <GPIO_writePin+0x118>
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	9d 81       	ldd	r25, Y+5	; 0x05
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <GPIO_writePin+0x66>
     fd2:	85 c0       	rjmp	.+266    	; 0x10de <GPIO_writePin+0x170>
     fd4:	af c0       	rjmp	.+350    	; 0x1134 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	a1 f4       	brne	.+40     	; 0x1004 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
     fdc:	ab e3       	ldi	r26, 0x3B	; 59
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	eb e3       	ldi	r30, 0x3B	; 59
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <GPIO_writePin+0x8c>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <GPIO_writePin+0x88>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	98 c0       	rjmp	.+304    	; 0x1134 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    1004:	ab e3       	ldi	r26, 0x3B	; 59
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	eb e3       	ldi	r30, 0x3B	; 59
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <GPIO_writePin+0xb4>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <GPIO_writePin+0xb0>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	83 c0       	rjmp	.+262    	; 0x1134 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	a1 f4       	brne	.+40     	; 0x105c <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    1034:	a8 e3       	ldi	r26, 0x38	; 56
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e8 e3       	ldi	r30, 0x38	; 56
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <GPIO_writePin+0xe4>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <GPIO_writePin+0xe0>
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	6c c0       	rjmp	.+216    	; 0x1134 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    105c:	a8 e3       	ldi	r26, 0x38	; 56
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e8 e3       	ldi	r30, 0x38	; 56
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <GPIO_writePin+0x10c>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <GPIO_writePin+0x108>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	57 c0       	rjmp	.+174    	; 0x1134 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	a1 f4       	brne	.+40     	; 0x10b4 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    108c:	a5 e3       	ldi	r26, 0x35	; 53
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e5 e3       	ldi	r30, 0x35	; 53
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <GPIO_writePin+0x13c>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <GPIO_writePin+0x138>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	40 c0       	rjmp	.+128    	; 0x1134 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    10b4:	a5 e3       	ldi	r26, 0x35	; 53
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e5 e3       	ldi	r30, 0x35	; 53
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <GPIO_writePin+0x164>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <GPIO_writePin+0x160>
    10d6:	80 95       	com	r24
    10d8:	84 23       	and	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	2b c0       	rjmp	.+86     	; 0x1134 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	a1 f4       	brne	.+40     	; 0x110c <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    10e4:	a2 e3       	ldi	r26, 0x32	; 50
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e2 e3       	ldi	r30, 0x32	; 50
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_writePin+0x194>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_writePin+0x190>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	14 c0       	rjmp	.+40     	; 0x1134 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    110c:	a2 e3       	ldi	r26, 0x32	; 50
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e2 e3       	ldi	r30, 0x32	; 50
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_writePin+0x1bc>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_writePin+0x1b8>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <GPIO_readPin+0x6>
    114a:	00 d0       	rcall	.+0      	; 0x114c <GPIO_readPin+0x8>
    114c:	0f 92       	push	r0
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	8a 83       	std	Y+2, r24	; 0x02
    1154:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1156:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 30       	cpi	r24, 0x08	; 8
    115c:	08 f0       	brcs	.+2      	; 0x1160 <GPIO_readPin+0x1c>
    115e:	84 c0       	rjmp	.+264    	; 0x1268 <GPIO_readPin+0x124>
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	84 30       	cpi	r24, 0x04	; 4
    1164:	08 f0       	brcs	.+2      	; 0x1168 <GPIO_readPin+0x24>
    1166:	80 c0       	rjmp	.+256    	; 0x1268 <GPIO_readPin+0x124>
		/* Do Nothing */
	} else {
		/* Read the pin value as required */
		switch (port_num) {
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3d 83       	std	Y+5, r19	; 0x05
    1170:	2c 83       	std	Y+4, r18	; 0x04
    1172:	4c 81       	ldd	r20, Y+4	; 0x04
    1174:	5d 81       	ldd	r21, Y+5	; 0x05
    1176:	41 30       	cpi	r20, 0x01	; 1
    1178:	51 05       	cpc	r21, r1
    117a:	79 f1       	breq	.+94     	; 0x11da <GPIO_readPin+0x96>
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	91 05       	cpc	r25, r1
    1184:	34 f4       	brge	.+12     	; 0x1192 <GPIO_readPin+0x4e>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	21 15       	cp	r18, r1
    118c:	31 05       	cpc	r19, r1
    118e:	69 f0       	breq	.+26     	; 0x11aa <GPIO_readPin+0x66>
    1190:	6b c0       	rjmp	.+214    	; 0x1268 <GPIO_readPin+0x124>
    1192:	4c 81       	ldd	r20, Y+4	; 0x04
    1194:	5d 81       	ldd	r21, Y+5	; 0x05
    1196:	42 30       	cpi	r20, 0x02	; 2
    1198:	51 05       	cpc	r21, r1
    119a:	b9 f1       	breq	.+110    	; 0x120a <GPIO_readPin+0xc6>
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <GPIO_readPin+0x64>
    11a6:	49 c0       	rjmp	.+146    	; 0x123a <GPIO_readPin+0xf6>
    11a8:	5f c0       	rjmp	.+190    	; 0x1268 <GPIO_readPin+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num)) {
    11aa:	e9 e3       	ldi	r30, 0x39	; 57
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a9 01       	movw	r20, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <GPIO_readPin+0x7e>
    11be:	55 95       	asr	r21
    11c0:	47 95       	ror	r20
    11c2:	8a 95       	dec	r24
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <GPIO_readPin+0x7a>
    11c6:	ca 01       	movw	r24, r20
    11c8:	81 70       	andi	r24, 0x01	; 1
    11ca:	90 70       	andi	r25, 0x00	; 0
    11cc:	88 23       	and	r24, r24
    11ce:	19 f0       	breq	.+6      	; 0x11d6 <GPIO_readPin+0x92>
				pin_value = LOGIC_HIGH;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	49 c0       	rjmp	.+146    	; 0x1268 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    11d6:	19 82       	std	Y+1, r1	; 0x01
    11d8:	47 c0       	rjmp	.+142    	; 0x1268 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num)) {
    11da:	e6 e3       	ldi	r30, 0x36	; 54
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a9 01       	movw	r20, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <GPIO_readPin+0xae>
    11ee:	55 95       	asr	r21
    11f0:	47 95       	ror	r20
    11f2:	8a 95       	dec	r24
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <GPIO_readPin+0xaa>
    11f6:	ca 01       	movw	r24, r20
    11f8:	81 70       	andi	r24, 0x01	; 1
    11fa:	90 70       	andi	r25, 0x00	; 0
    11fc:	88 23       	and	r24, r24
    11fe:	19 f0       	breq	.+6      	; 0x1206 <GPIO_readPin+0xc2>
				pin_value = LOGIC_HIGH;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	31 c0       	rjmp	.+98     	; 0x1268 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    1206:	19 82       	std	Y+1, r1	; 0x01
    1208:	2f c0       	rjmp	.+94     	; 0x1268 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num)) {
    120a:	e3 e3       	ldi	r30, 0x33	; 51
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	88 2f       	mov	r24, r24
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	a9 01       	movw	r20, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <GPIO_readPin+0xde>
    121e:	55 95       	asr	r21
    1220:	47 95       	ror	r20
    1222:	8a 95       	dec	r24
    1224:	e2 f7       	brpl	.-8      	; 0x121e <GPIO_readPin+0xda>
    1226:	ca 01       	movw	r24, r20
    1228:	81 70       	andi	r24, 0x01	; 1
    122a:	90 70       	andi	r25, 0x00	; 0
    122c:	88 23       	and	r24, r24
    122e:	19 f0       	breq	.+6      	; 0x1236 <GPIO_readPin+0xf2>
				pin_value = LOGIC_HIGH;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	19 c0       	rjmp	.+50     	; 0x1268 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    1236:	19 82       	std	Y+1, r1	; 0x01
    1238:	17 c0       	rjmp	.+46     	; 0x1268 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num)) {
    123a:	e0 e3       	ldi	r30, 0x30	; 48
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	a9 01       	movw	r20, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <GPIO_readPin+0x10e>
    124e:	55 95       	asr	r21
    1250:	47 95       	ror	r20
    1252:	8a 95       	dec	r24
    1254:	e2 f7       	brpl	.-8      	; 0x124e <GPIO_readPin+0x10a>
    1256:	ca 01       	movw	r24, r20
    1258:	81 70       	andi	r24, 0x01	; 1
    125a:	90 70       	andi	r25, 0x00	; 0
    125c:	88 23       	and	r24, r24
    125e:	19 f0       	breq	.+6      	; 0x1266 <GPIO_readPin+0x122>
				pin_value = LOGIC_HIGH;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    1266:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1268:	89 81       	ldd	r24, Y+1	; 0x01
}
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <GPIO_setupPortDirection+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <GPIO_setupPortDirection+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	90 f5       	brcc	.+100    	; 0x12f4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3c 83       	std	Y+4, r19	; 0x04
    1298:	2b 83       	std	Y+3, r18	; 0x03
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	d1 f0       	breq	.+52     	; 0x12d8 <GPIO_setupPortDirection+0x5e>
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	2c f4       	brge	.+10     	; 0x12b8 <GPIO_setupPortDirection+0x3e>
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	61 f0       	breq	.+24     	; 0x12ce <GPIO_setupPortDirection+0x54>
    12b6:	1e c0       	rjmp	.+60     	; 0x12f4 <GPIO_setupPortDirection+0x7a>
    12b8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ba:	3c 81       	ldd	r19, Y+4	; 0x04
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	81 f0       	breq	.+32     	; 0x12e2 <GPIO_setupPortDirection+0x68>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <GPIO_setupPortDirection+0x72>
    12cc:	13 c0       	rjmp	.+38     	; 0x12f4 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    12ce:	ea e3       	ldi	r30, 0x3A	; 58
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	80 83       	st	Z, r24
    12d6:	0e c0       	rjmp	.+28     	; 0x12f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    12d8:	e7 e3       	ldi	r30, 0x37	; 55
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	80 83       	st	Z, r24
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12e2:	e4 e3       	ldi	r30, 0x34	; 52
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	80 83       	st	Z, r24
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12ec:	e1 e3       	ldi	r30, 0x31	; 49
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <GPIO_writePort+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <GPIO_writePort+0x8>
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	90 f5       	brcc	.+100    	; 0x137c <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* Write the port value as required */
		switch (port_num) {
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3c 83       	std	Y+4, r19	; 0x04
    1320:	2b 83       	std	Y+3, r18	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	91 05       	cpc	r25, r1
    132a:	d1 f0       	breq	.+52     	; 0x1360 <GPIO_writePort+0x5e>
    132c:	2b 81       	ldd	r18, Y+3	; 0x03
    132e:	3c 81       	ldd	r19, Y+4	; 0x04
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	2c f4       	brge	.+10     	; 0x1340 <GPIO_writePort+0x3e>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	61 f0       	breq	.+24     	; 0x1356 <GPIO_writePort+0x54>
    133e:	1e c0       	rjmp	.+60     	; 0x137c <GPIO_writePort+0x7a>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <GPIO_writePort+0x68>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	81 f0       	breq	.+32     	; 0x1374 <GPIO_writePort+0x72>
    1354:	13 c0       	rjmp	.+38     	; 0x137c <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1356:	eb e3       	ldi	r30, 0x3B	; 59
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	80 83       	st	Z, r24
    135e:	0e c0       	rjmp	.+28     	; 0x137c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1360:	e8 e3       	ldi	r30, 0x38	; 56
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	80 83       	st	Z, r24
    1368:	09 c0       	rjmp	.+18     	; 0x137c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    136a:	e5 e3       	ldi	r30, 0x35	; 53
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	80 83       	st	Z, r24
    1372:	04 c0       	rjmp	.+8      	; 0x137c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1374:	e2 e3       	ldi	r30, 0x32	; 50
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 83       	st	Z, r24
			break;
		}
	}
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <GPIO_readPort+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <GPIO_readPort+0x8>
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1398:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	84 30       	cpi	r24, 0x04	; 4
    139e:	90 f5       	brcc	.+100    	; 0x1404 <GPIO_readPort+0x7a>
		/* Do Nothing */
	} else {
		/* Read the port value as required */
		switch (port_num) {
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	3c 83       	std	Y+4, r19	; 0x04
    13a8:	2b 83       	std	Y+3, r18	; 0x03
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	d1 f0       	breq	.+52     	; 0x13e8 <GPIO_readPort+0x5e>
    13b4:	2b 81       	ldd	r18, Y+3	; 0x03
    13b6:	3c 81       	ldd	r19, Y+4	; 0x04
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <GPIO_readPort+0x3e>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	61 f0       	breq	.+24     	; 0x13de <GPIO_readPort+0x54>
    13c6:	1e c0       	rjmp	.+60     	; 0x1404 <GPIO_readPort+0x7a>
    13c8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ca:	3c 81       	ldd	r19, Y+4	; 0x04
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	81 f0       	breq	.+32     	; 0x13f2 <GPIO_readPort+0x68>
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	91 05       	cpc	r25, r1
    13da:	81 f0       	breq	.+32     	; 0x13fc <GPIO_readPort+0x72>
    13dc:	13 c0       	rjmp	.+38     	; 0x1404 <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    13de:	e9 e3       	ldi	r30, 0x39	; 57
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	0e c0       	rjmp	.+28     	; 0x1404 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    13e8:	e6 e3       	ldi	r30, 0x36	; 54
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    13f2:	e3 e3       	ldi	r30, 0x33	; 51
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    13fc:	e0 e3       	ldi	r30, 0x30	; 48
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1404:	89 81       	ldd	r24, Y+1	; 0x01
}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <__vector_6>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect) {
    1414:	1f 92       	push	r1
    1416:	0f 92       	push	r0
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	0f 92       	push	r0
    141c:	11 24       	eor	r1, r1
    141e:	2f 93       	push	r18
    1420:	3f 93       	push	r19
    1422:	4f 93       	push	r20
    1424:	5f 93       	push	r21
    1426:	6f 93       	push	r22
    1428:	7f 93       	push	r23
    142a:	8f 93       	push	r24
    142c:	9f 93       	push	r25
    142e:	af 93       	push	r26
    1430:	bf 93       	push	r27
    1432:	ef 93       	push	r30
    1434:	ff 93       	push	r31
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    143e:	80 91 78 00 	lds	r24, 0x0078
    1442:	90 91 79 00 	lds	r25, 0x0079
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	29 f0       	breq	.+10     	; 0x1454 <__vector_6+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    144a:	e0 91 78 00 	lds	r30, 0x0078
    144e:	f0 91 79 00 	lds	r31, 0x0079
    1452:	09 95       	icall
	}
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	ff 91       	pop	r31
    145a:	ef 91       	pop	r30
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	7f 91       	pop	r23
    1466:	6f 91       	pop	r22
    1468:	5f 91       	pop	r21
    146a:	4f 91       	pop	r20
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <ICU_init>:
 * 	1. Set the required clock.
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType *Config_Ptr) {
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	00 d0       	rcall	.+0      	; 0x1480 <ICU_init+0x6>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1 << PD6);
    1488:	a1 e3       	ldi	r26, 0x31	; 49
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e1 e3       	ldi	r30, 0x31	; 49
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8f 7b       	andi	r24, 0xBF	; 191
    1494:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    1496:	ef e4       	ldi	r30, 0x4F	; 79
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8c e0       	ldi	r24, 0x0C	; 12
    149c:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    149e:	ae e4       	ldi	r26, 0x4E	; 78
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ee e4       	ldi	r30, 0x4E	; 78
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	98 2f       	mov	r25, r24
    14aa:	98 7f       	andi	r25, 0xF8	; 248
    14ac:	e9 81       	ldd	r30, Y+1	; 0x01
    14ae:	fa 81       	ldd	r31, Y+2	; 0x02
    14b0:	80 81       	ld	r24, Z
    14b2:	89 2b       	or	r24, r25
    14b4:	8c 93       	st	X, r24
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge) << 6);
    14b6:	ae e4       	ldi	r26, 0x4E	; 78
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ee e4       	ldi	r30, 0x4E	; 78
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	28 2f       	mov	r18, r24
    14c2:	2f 7b       	andi	r18, 0xBF	; 191
    14c4:	e9 81       	ldd	r30, Y+1	; 0x01
    14c6:	fa 81       	ldd	r31, Y+2	; 0x02
    14c8:	81 81       	ldd	r24, Z+1	; 0x01
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	00 24       	eor	r0, r0
    14d0:	96 95       	lsr	r25
    14d2:	87 95       	ror	r24
    14d4:	07 94       	ror	r0
    14d6:	96 95       	lsr	r25
    14d8:	87 95       	ror	r24
    14da:	07 94       	ror	r0
    14dc:	98 2f       	mov	r25, r24
    14de:	80 2d       	mov	r24, r0
    14e0:	82 2b       	or	r24, r18
    14e2:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    14e4:	ec e4       	ldi	r30, 0x4C	; 76
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	11 82       	std	Z+1, r1	; 0x01
    14ea:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    14ec:	e6 e4       	ldi	r30, 0x46	; 70
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	11 82       	std	Z+1, r1	; 0x01
    14f2:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1 << TICIE1);
    14f4:	a9 e5       	ldi	r26, 0x59	; 89
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e9 e5       	ldi	r30, 0x59	; 89
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 62       	ori	r24, 0x20	; 32
    1500:	8c 93       	st	X, r24
}
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void (*a_ptr)(void)) {
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <ICU_setCallBack+0x6>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	9a 83       	std	Y+2, r25	; 0x02
    1518:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	90 93 79 00 	sts	0x0079, r25
    1522:	80 93 78 00 	sts	0x0078, r24
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType) {
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	0f 92       	push	r0
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType << 6);
    153c:	ae e4       	ldi	r26, 0x4E	; 78
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ee e4       	ldi	r30, 0x4E	; 78
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	28 2f       	mov	r18, r24
    1548:	2f 7b       	andi	r18, 0xBF	; 191
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	00 24       	eor	r0, r0
    1552:	96 95       	lsr	r25
    1554:	87 95       	ror	r24
    1556:	07 94       	ror	r0
    1558:	96 95       	lsr	r25
    155a:	87 95       	ror	r24
    155c:	07 94       	ror	r0
    155e:	98 2f       	mov	r25, r24
    1560:	80 2d       	mov	r24, r0
    1562:	82 2b       	or	r24, r18
    1564:	8c 93       	st	X, r24
}
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <ICU_getInputCaptureValue>:

/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void) {
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1576:	e6 e4       	ldi	r30, 0x46	; 70
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	91 81       	ldd	r25, Z+1	; 0x01
}
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void) {
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    158c:	ec e4       	ldi	r30, 0x4C	; 76
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	11 82       	std	Z+1, r1	; 0x01
    1592:	10 82       	st	Z, r1
}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void) {
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    15a2:	ef e4       	ldi	r30, 0x4F	; 79
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	10 82       	st	Z, r1
	TCCR1B = 0;
    15a8:	ee e4       	ldi	r30, 0x4E	; 78
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	10 82       	st	Z, r1
	TCNT1 = 0;
    15ae:	ec e4       	ldi	r30, 0x4C	; 76
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	11 82       	std	Z+1, r1	; 0x01
    15b4:	10 82       	st	Z, r1
	ICR1 = 0;
    15b6:	e6 e4       	ldi	r30, 0x46	; 70
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	11 82       	std	Z+1, r1	; 0x01
    15bc:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1 << TICIE1);
    15be:	a9 e5       	ldi	r26, 0x59	; 89
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e9 e5       	ldi	r30, 0x59	; 89
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8f 7d       	andi	r24, 0xDF	; 223
    15ca:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    15cc:	10 92 79 00 	sts	0x0079, r1
    15d0:	10 92 78 00 	sts	0x0078, r1
}
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void) {
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	2e 97       	sbiw	r28, 0x0e	; 14
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	0e 94 cc 06 	call	0xd98	; 0xd98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	0e 94 cc 06 	call	0xd98	; 0xd98 <GPIO_setupPinDirection>
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	a0 ea       	ldi	r26, 0xA0	; 160
    1608:	b1 e4       	ldi	r27, 0x41	; 65
    160a:	8b 87       	std	Y+11, r24	; 0x0b
    160c:	9c 87       	std	Y+12, r25	; 0x0c
    160e:	ad 87       	std	Y+13, r26	; 0x0d
    1610:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1612:	6b 85       	ldd	r22, Y+11	; 0x0b
    1614:	7c 85       	ldd	r23, Y+12	; 0x0c
    1616:	8d 85       	ldd	r24, Y+13	; 0x0d
    1618:	9e 85       	ldd	r25, Y+14	; 0x0e
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	4a ef       	ldi	r20, 0xFA	; 250
    1620:	54 e4       	ldi	r21, 0x44	; 68
    1622:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	8f 83       	std	Y+7, r24	; 0x07
    162c:	98 87       	std	Y+8, r25	; 0x08
    162e:	a9 87       	std	Y+9, r26	; 0x09
    1630:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1632:	6f 81       	ldd	r22, Y+7	; 0x07
    1634:	78 85       	ldd	r23, Y+8	; 0x08
    1636:	89 85       	ldd	r24, Y+9	; 0x09
    1638:	9a 85       	ldd	r25, Y+10	; 0x0a
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e8       	ldi	r20, 0x80	; 128
    1640:	5f e3       	ldi	r21, 0x3F	; 63
    1642:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1646:	88 23       	and	r24, r24
    1648:	2c f4       	brge	.+10     	; 0x1654 <LCD_init+0x7a>
		__ticks = 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9e 83       	std	Y+6, r25	; 0x06
    1650:	8d 83       	std	Y+5, r24	; 0x05
    1652:	3f c0       	rjmp	.+126    	; 0x16d2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1654:	6f 81       	ldd	r22, Y+7	; 0x07
    1656:	78 85       	ldd	r23, Y+8	; 0x08
    1658:	89 85       	ldd	r24, Y+9	; 0x09
    165a:	9a 85       	ldd	r25, Y+10	; 0x0a
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	3f ef       	ldi	r19, 0xFF	; 255
    1660:	4f e7       	ldi	r20, 0x7F	; 127
    1662:	57 e4       	ldi	r21, 0x47	; 71
    1664:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1668:	18 16       	cp	r1, r24
    166a:	4c f5       	brge	.+82     	; 0x16be <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166c:	6b 85       	ldd	r22, Y+11	; 0x0b
    166e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1670:	8d 85       	ldd	r24, Y+13	; 0x0d
    1672:	9e 85       	ldd	r25, Y+14	; 0x0e
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e2       	ldi	r20, 0x20	; 32
    167a:	51 e4       	ldi	r21, 0x41	; 65
    167c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	9e 83       	std	Y+6, r25	; 0x06
    1692:	8d 83       	std	Y+5, r24	; 0x05
    1694:	0f c0       	rjmp	.+30     	; 0x16b4 <LCD_init+0xda>
    1696:	88 ec       	ldi	r24, 0xC8	; 200
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	9c 83       	std	Y+4, r25	; 0x04
    169c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	f1 f7       	brne	.-4      	; 0x16a2 <LCD_init+0xc8>
    16a6:	9c 83       	std	Y+4, r25	; 0x04
    16a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	9e 83       	std	Y+6, r25	; 0x06
    16b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	69 f7       	brne	.-38     	; 0x1696 <LCD_init+0xbc>
    16bc:	14 c0       	rjmp	.+40     	; 0x16e6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16be:	6f 81       	ldd	r22, Y+7	; 0x07
    16c0:	78 85       	ldd	r23, Y+8	; 0x08
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	9e 81       	ldd	r25, Y+6	; 0x06
    16d6:	9a 83       	std	Y+2, r25	; 0x02
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <LCD_init+0x104>
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	6f ef       	ldi	r22, 0xFF	; 255
    16ea:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    16ee:	88 e3       	ldi	r24, 0x38	; 56
    16f0:	0e 94 89 0b 	call	0x1712	; 0x1712 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    16f4:	8c e0       	ldi	r24, 0x0C	; 12
    16f6:	0e 94 89 0b 	call	0x1712	; 0x1712 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	0e 94 89 0b 	call	0x1712	; 0x1712 <LCD_sendCommand>
}
    1700:	2e 96       	adiw	r28, 0x0e	; 14
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command) {
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	e9 97       	sbiw	r28, 0x39	; 57
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <GPIO_writePin>
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a0 e8       	ldi	r26, 0x80	; 128
    1738:	bf e3       	ldi	r27, 0x3F	; 63
    173a:	8d ab       	std	Y+53, r24	; 0x35
    173c:	9e ab       	std	Y+54, r25	; 0x36
    173e:	af ab       	std	Y+55, r26	; 0x37
    1740:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1742:	6d a9       	ldd	r22, Y+53	; 0x35
    1744:	7e a9       	ldd	r23, Y+54	; 0x36
    1746:	8f a9       	ldd	r24, Y+55	; 0x37
    1748:	98 ad       	ldd	r25, Y+56	; 0x38
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	4a ef       	ldi	r20, 0xFA	; 250
    1750:	54 e4       	ldi	r21, 0x44	; 68
    1752:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	89 ab       	std	Y+49, r24	; 0x31
    175c:	9a ab       	std	Y+50, r25	; 0x32
    175e:	ab ab       	std	Y+51, r26	; 0x33
    1760:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1762:	69 a9       	ldd	r22, Y+49	; 0x31
    1764:	7a a9       	ldd	r23, Y+50	; 0x32
    1766:	8b a9       	ldd	r24, Y+51	; 0x33
    1768:	9c a9       	ldd	r25, Y+52	; 0x34
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f e3       	ldi	r21, 0x3F	; 63
    1772:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1776:	88 23       	and	r24, r24
    1778:	2c f4       	brge	.+10     	; 0x1784 <LCD_sendCommand+0x72>
		__ticks = 1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	98 ab       	std	Y+48, r25	; 0x30
    1780:	8f a7       	std	Y+47, r24	; 0x2f
    1782:	3f c0       	rjmp	.+126    	; 0x1802 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1784:	69 a9       	ldd	r22, Y+49	; 0x31
    1786:	7a a9       	ldd	r23, Y+50	; 0x32
    1788:	8b a9       	ldd	r24, Y+51	; 0x33
    178a:	9c a9       	ldd	r25, Y+52	; 0x34
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	3f ef       	ldi	r19, 0xFF	; 255
    1790:	4f e7       	ldi	r20, 0x7F	; 127
    1792:	57 e4       	ldi	r21, 0x47	; 71
    1794:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1798:	18 16       	cp	r1, r24
    179a:	4c f5       	brge	.+82     	; 0x17ee <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179c:	6d a9       	ldd	r22, Y+53	; 0x35
    179e:	7e a9       	ldd	r23, Y+54	; 0x36
    17a0:	8f a9       	ldd	r24, Y+55	; 0x37
    17a2:	98 ad       	ldd	r25, Y+56	; 0x38
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	51 e4       	ldi	r21, 0x41	; 65
    17ac:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	98 ab       	std	Y+48, r25	; 0x30
    17c2:	8f a7       	std	Y+47, r24	; 0x2f
    17c4:	0f c0       	rjmp	.+30     	; 0x17e4 <LCD_sendCommand+0xd2>
    17c6:	88 ec       	ldi	r24, 0xC8	; 200
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9e a7       	std	Y+46, r25	; 0x2e
    17cc:	8d a7       	std	Y+45, r24	; 0x2d
    17ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    17d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <LCD_sendCommand+0xc0>
    17d6:	9e a7       	std	Y+46, r25	; 0x2e
    17d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17da:	8f a5       	ldd	r24, Y+47	; 0x2f
    17dc:	98 a9       	ldd	r25, Y+48	; 0x30
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	98 ab       	std	Y+48, r25	; 0x30
    17e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e6:	98 a9       	ldd	r25, Y+48	; 0x30
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	69 f7       	brne	.-38     	; 0x17c6 <LCD_sendCommand+0xb4>
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ee:	69 a9       	ldd	r22, Y+49	; 0x31
    17f0:	7a a9       	ldd	r23, Y+50	; 0x32
    17f2:	8b a9       	ldd	r24, Y+51	; 0x33
    17f4:	9c a9       	ldd	r25, Y+52	; 0x34
    17f6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	98 ab       	std	Y+48, r25	; 0x30
    1800:	8f a7       	std	Y+47, r24	; 0x2f
    1802:	8f a5       	ldd	r24, Y+47	; 0x2f
    1804:	98 a9       	ldd	r25, Y+48	; 0x30
    1806:	9c a7       	std	Y+44, r25	; 0x2c
    1808:	8b a7       	std	Y+43, r24	; 0x2b
    180a:	8b a5       	ldd	r24, Y+43	; 0x2b
    180c:	9c a5       	ldd	r25, Y+44	; 0x2c
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <LCD_sendCommand+0xfc>
    1812:	9c a7       	std	Y+44, r25	; 0x2c
    1814:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	61 e0       	ldi	r22, 0x01	; 1
    181a:	41 e0       	ldi	r20, 0x01	; 1
    181c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <GPIO_writePin>
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a0 e8       	ldi	r26, 0x80	; 128
    1826:	bf e3       	ldi	r27, 0x3F	; 63
    1828:	8f a3       	std	Y+39, r24	; 0x27
    182a:	98 a7       	std	Y+40, r25	; 0x28
    182c:	a9 a7       	std	Y+41, r26	; 0x29
    182e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1830:	6f a1       	ldd	r22, Y+39	; 0x27
    1832:	78 a5       	ldd	r23, Y+40	; 0x28
    1834:	89 a5       	ldd	r24, Y+41	; 0x29
    1836:	9a a5       	ldd	r25, Y+42	; 0x2a
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	4a ef       	ldi	r20, 0xFA	; 250
    183e:	54 e4       	ldi	r21, 0x44	; 68
    1840:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	8b a3       	std	Y+35, r24	; 0x23
    184a:	9c a3       	std	Y+36, r25	; 0x24
    184c:	ad a3       	std	Y+37, r26	; 0x25
    184e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1850:	6b a1       	ldd	r22, Y+35	; 0x23
    1852:	7c a1       	ldd	r23, Y+36	; 0x24
    1854:	8d a1       	ldd	r24, Y+37	; 0x25
    1856:	9e a1       	ldd	r25, Y+38	; 0x26
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5f e3       	ldi	r21, 0x3F	; 63
    1860:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1864:	88 23       	and	r24, r24
    1866:	2c f4       	brge	.+10     	; 0x1872 <LCD_sendCommand+0x160>
		__ticks = 1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9a a3       	std	Y+34, r25	; 0x22
    186e:	89 a3       	std	Y+33, r24	; 0x21
    1870:	3f c0       	rjmp	.+126    	; 0x18f0 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1872:	6b a1       	ldd	r22, Y+35	; 0x23
    1874:	7c a1       	ldd	r23, Y+36	; 0x24
    1876:	8d a1       	ldd	r24, Y+37	; 0x25
    1878:	9e a1       	ldd	r25, Y+38	; 0x26
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	3f ef       	ldi	r19, 0xFF	; 255
    187e:	4f e7       	ldi	r20, 0x7F	; 127
    1880:	57 e4       	ldi	r21, 0x47	; 71
    1882:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1886:	18 16       	cp	r1, r24
    1888:	4c f5       	brge	.+82     	; 0x18dc <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188a:	6f a1       	ldd	r22, Y+39	; 0x27
    188c:	78 a5       	ldd	r23, Y+40	; 0x28
    188e:	89 a5       	ldd	r24, Y+41	; 0x29
    1890:	9a a5       	ldd	r25, Y+42	; 0x2a
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	9a a3       	std	Y+34, r25	; 0x22
    18b0:	89 a3       	std	Y+33, r24	; 0x21
    18b2:	0f c0       	rjmp	.+30     	; 0x18d2 <LCD_sendCommand+0x1c0>
    18b4:	88 ec       	ldi	r24, 0xC8	; 200
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	98 a3       	std	Y+32, r25	; 0x20
    18ba:	8f 8f       	std	Y+31, r24	; 0x1f
    18bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18be:	98 a1       	ldd	r25, Y+32	; 0x20
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <LCD_sendCommand+0x1ae>
    18c4:	98 a3       	std	Y+32, r25	; 0x20
    18c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c8:	89 a1       	ldd	r24, Y+33	; 0x21
    18ca:	9a a1       	ldd	r25, Y+34	; 0x22
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	9a a3       	std	Y+34, r25	; 0x22
    18d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d2:	89 a1       	ldd	r24, Y+33	; 0x21
    18d4:	9a a1       	ldd	r25, Y+34	; 0x22
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	69 f7       	brne	.-38     	; 0x18b4 <LCD_sendCommand+0x1a2>
    18da:	14 c0       	rjmp	.+40     	; 0x1904 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18dc:	6b a1       	ldd	r22, Y+35	; 0x23
    18de:	7c a1       	ldd	r23, Y+36	; 0x24
    18e0:	8d a1       	ldd	r24, Y+37	; 0x25
    18e2:	9e a1       	ldd	r25, Y+38	; 0x26
    18e4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9a a3       	std	Y+34, r25	; 0x22
    18ee:	89 a3       	std	Y+33, r24	; 0x21
    18f0:	89 a1       	ldd	r24, Y+33	; 0x21
    18f2:	9a a1       	ldd	r25, Y+34	; 0x22
    18f4:	9e 8f       	std	Y+30, r25	; 0x1e
    18f6:	8d 8f       	std	Y+29, r24	; 0x1d
    18f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <LCD_sendCommand+0x1ea>
    1900:	9e 8f       	std	Y+30, r25	; 0x1e
    1902:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	69 ad       	ldd	r22, Y+57	; 0x39
    1908:	0e 94 81 09 	call	0x1302	; 0x1302 <GPIO_writePort>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a0 e8       	ldi	r26, 0x80	; 128
    1912:	bf e3       	ldi	r27, 0x3F	; 63
    1914:	89 8f       	std	Y+25, r24	; 0x19
    1916:	9a 8f       	std	Y+26, r25	; 0x1a
    1918:	ab 8f       	std	Y+27, r26	; 0x1b
    191a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191c:	69 8d       	ldd	r22, Y+25	; 0x19
    191e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1920:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1922:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	4a ef       	ldi	r20, 0xFA	; 250
    192a:	54 e4       	ldi	r21, 0x44	; 68
    192c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	8d 8b       	std	Y+21, r24	; 0x15
    1936:	9e 8b       	std	Y+22, r25	; 0x16
    1938:	af 8b       	std	Y+23, r26	; 0x17
    193a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    193c:	6d 89       	ldd	r22, Y+21	; 0x15
    193e:	7e 89       	ldd	r23, Y+22	; 0x16
    1940:	8f 89       	ldd	r24, Y+23	; 0x17
    1942:	98 8d       	ldd	r25, Y+24	; 0x18
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1950:	88 23       	and	r24, r24
    1952:	2c f4       	brge	.+10     	; 0x195e <LCD_sendCommand+0x24c>
		__ticks = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9c 8b       	std	Y+20, r25	; 0x14
    195a:	8b 8b       	std	Y+19, r24	; 0x13
    195c:	3f c0       	rjmp	.+126    	; 0x19dc <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    195e:	6d 89       	ldd	r22, Y+21	; 0x15
    1960:	7e 89       	ldd	r23, Y+22	; 0x16
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1972:	18 16       	cp	r1, r24
    1974:	4c f5       	brge	.+82     	; 0x19c8 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1976:	69 8d       	ldd	r22, Y+25	; 0x19
    1978:	7a 8d       	ldd	r23, Y+26	; 0x1a
    197a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    197c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e2       	ldi	r20, 0x20	; 32
    1984:	51 e4       	ldi	r21, 0x41	; 65
    1986:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	9c 8b       	std	Y+20, r25	; 0x14
    199c:	8b 8b       	std	Y+19, r24	; 0x13
    199e:	0f c0       	rjmp	.+30     	; 0x19be <LCD_sendCommand+0x2ac>
    19a0:	88 ec       	ldi	r24, 0xC8	; 200
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9a 8b       	std	Y+18, r25	; 0x12
    19a6:	89 8b       	std	Y+17, r24	; 0x11
    19a8:	89 89       	ldd	r24, Y+17	; 0x11
    19aa:	9a 89       	ldd	r25, Y+18	; 0x12
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <LCD_sendCommand+0x29a>
    19b0:	9a 8b       	std	Y+18, r25	; 0x12
    19b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b4:	8b 89       	ldd	r24, Y+19	; 0x13
    19b6:	9c 89       	ldd	r25, Y+20	; 0x14
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	9c 8b       	std	Y+20, r25	; 0x14
    19bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19be:	8b 89       	ldd	r24, Y+19	; 0x13
    19c0:	9c 89       	ldd	r25, Y+20	; 0x14
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <LCD_sendCommand+0x28e>
    19c6:	14 c0       	rjmp	.+40     	; 0x19f0 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ca:	7e 89       	ldd	r23, Y+22	; 0x16
    19cc:	8f 89       	ldd	r24, Y+23	; 0x17
    19ce:	98 8d       	ldd	r25, Y+24	; 0x18
    19d0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9c 8b       	std	Y+20, r25	; 0x14
    19da:	8b 8b       	std	Y+19, r24	; 0x13
    19dc:	8b 89       	ldd	r24, Y+19	; 0x13
    19de:	9c 89       	ldd	r25, Y+20	; 0x14
    19e0:	98 8b       	std	Y+16, r25	; 0x10
    19e2:	8f 87       	std	Y+15, r24	; 0x0f
    19e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e6:	98 89       	ldd	r25, Y+16	; 0x10
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <LCD_sendCommand+0x2d6>
    19ec:	98 8b       	std	Y+16, r25	; 0x10
    19ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <GPIO_writePin>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	a0 e8       	ldi	r26, 0x80	; 128
    1a00:	bf e3       	ldi	r27, 0x3F	; 63
    1a02:	8b 87       	std	Y+11, r24	; 0x0b
    1a04:	9c 87       	std	Y+12, r25	; 0x0c
    1a06:	ad 87       	std	Y+13, r26	; 0x0d
    1a08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4a ef       	ldi	r20, 0xFA	; 250
    1a18:	54 e4       	ldi	r21, 0x44	; 68
    1a1a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	8f 83       	std	Y+7, r24	; 0x07
    1a24:	98 87       	std	Y+8, r25	; 0x08
    1a26:	a9 87       	std	Y+9, r26	; 0x09
    1a28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e8       	ldi	r20, 0x80	; 128
    1a38:	5f e3       	ldi	r21, 0x3F	; 63
    1a3a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <LCD_sendCommand+0x33a>
		__ticks = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9e 83       	std	Y+6, r25	; 0x06
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	3f c0       	rjmp	.+126    	; 0x1aca <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4e:	78 85       	ldd	r23, Y+8	; 0x08
    1a50:	89 85       	ldd	r24, Y+9	; 0x09
    1a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	3f ef       	ldi	r19, 0xFF	; 255
    1a58:	4f e7       	ldi	r20, 0x7F	; 127
    1a5a:	57 e4       	ldi	r21, 0x47	; 71
    1a5c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1a60:	18 16       	cp	r1, r24
    1a62:	4c f5       	brge	.+82     	; 0x1ab6 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e2       	ldi	r20, 0x20	; 32
    1a72:	51 e4       	ldi	r21, 0x41	; 65
    1a74:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <LCD_sendCommand+0x39a>
    1a8e:	88 ec       	ldi	r24, 0xC8	; 200
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9c 83       	std	Y+4, r25	; 0x04
    1a94:	8b 83       	std	Y+3, r24	; 0x03
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <LCD_sendCommand+0x388>
    1a9e:	9c 83       	std	Y+4, r25	; 0x04
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	69 f7       	brne	.-38     	; 0x1a8e <LCD_sendCommand+0x37c>
    1ab4:	14 c0       	rjmp	.+40     	; 0x1ade <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab8:	78 85       	ldd	r23, Y+8	; 0x08
    1aba:	89 85       	ldd	r24, Y+9	; 0x09
    1abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <LCD_sendCommand+0x3c4>
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ade:	e9 96       	adiw	r28, 0x39	; 57
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data) {
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	e9 97       	sbiw	r28, 0x39	; 57
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <GPIO_writePin>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e8       	ldi	r26, 0x80	; 128
    1b16:	bf e3       	ldi	r27, 0x3F	; 63
    1b18:	8d ab       	std	Y+53, r24	; 0x35
    1b1a:	9e ab       	std	Y+54, r25	; 0x36
    1b1c:	af ab       	std	Y+55, r26	; 0x37
    1b1e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	6d a9       	ldd	r22, Y+53	; 0x35
    1b22:	7e a9       	ldd	r23, Y+54	; 0x36
    1b24:	8f a9       	ldd	r24, Y+55	; 0x37
    1b26:	98 ad       	ldd	r25, Y+56	; 0x38
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	4a ef       	ldi	r20, 0xFA	; 250
    1b2e:	54 e4       	ldi	r21, 0x44	; 68
    1b30:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	89 ab       	std	Y+49, r24	; 0x31
    1b3a:	9a ab       	std	Y+50, r25	; 0x32
    1b3c:	ab ab       	std	Y+51, r26	; 0x33
    1b3e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b40:	69 a9       	ldd	r22, Y+49	; 0x31
    1b42:	7a a9       	ldd	r23, Y+50	; 0x32
    1b44:	8b a9       	ldd	r24, Y+51	; 0x33
    1b46:	9c a9       	ldd	r25, Y+52	; 0x34
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e8       	ldi	r20, 0x80	; 128
    1b4e:	5f e3       	ldi	r21, 0x3F	; 63
    1b50:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	98 ab       	std	Y+48, r25	; 0x30
    1b5e:	8f a7       	std	Y+47, r24	; 0x2f
    1b60:	3f c0       	rjmp	.+126    	; 0x1be0 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1b62:	69 a9       	ldd	r22, Y+49	; 0x31
    1b64:	7a a9       	ldd	r23, Y+50	; 0x32
    1b66:	8b a9       	ldd	r24, Y+51	; 0x33
    1b68:	9c a9       	ldd	r25, Y+52	; 0x34
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	3f ef       	ldi	r19, 0xFF	; 255
    1b6e:	4f e7       	ldi	r20, 0x7F	; 127
    1b70:	57 e4       	ldi	r21, 0x47	; 71
    1b72:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	4c f5       	brge	.+82     	; 0x1bcc <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b7c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b7e:	8f a9       	ldd	r24, Y+55	; 0x37
    1b80:	98 ad       	ldd	r25, Y+56	; 0x38
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e2       	ldi	r20, 0x20	; 32
    1b88:	51 e4       	ldi	r21, 0x41	; 65
    1b8a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	98 ab       	std	Y+48, r25	; 0x30
    1ba0:	8f a7       	std	Y+47, r24	; 0x2f
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <LCD_displayCharacter+0xd2>
    1ba4:	88 ec       	ldi	r24, 0xC8	; 200
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9e a7       	std	Y+46, r25	; 0x2e
    1baa:	8d a7       	std	Y+45, r24	; 0x2d
    1bac:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bae:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <LCD_displayCharacter+0xc0>
    1bb4:	9e a7       	std	Y+46, r25	; 0x2e
    1bb6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bba:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	98 ab       	std	Y+48, r25	; 0x30
    1bc0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc4:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	69 f7       	brne	.-38     	; 0x1ba4 <LCD_displayCharacter+0xb4>
    1bca:	14 c0       	rjmp	.+40     	; 0x1bf4 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bce:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1bd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	98 ab       	std	Y+48, r25	; 0x30
    1bde:	8f a7       	std	Y+47, r24	; 0x2f
    1be0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1be2:	98 a9       	ldd	r25, Y+48	; 0x30
    1be4:	9c a7       	std	Y+44, r25	; 0x2c
    1be6:	8b a7       	std	Y+43, r24	; 0x2b
    1be8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bea:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_displayCharacter+0xfc>
    1bf0:	9c a7       	std	Y+44, r25	; 0x2c
    1bf2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	41 e0       	ldi	r20, 0x01	; 1
    1bfa:	0e 94 b7 07 	call	0xf6e	; 0xf6e <GPIO_writePin>
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	a0 e8       	ldi	r26, 0x80	; 128
    1c04:	bf e3       	ldi	r27, 0x3F	; 63
    1c06:	8f a3       	std	Y+39, r24	; 0x27
    1c08:	98 a7       	std	Y+40, r25	; 0x28
    1c0a:	a9 a7       	std	Y+41, r26	; 0x29
    1c0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c10:	78 a5       	ldd	r23, Y+40	; 0x28
    1c12:	89 a5       	ldd	r24, Y+41	; 0x29
    1c14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4a ef       	ldi	r20, 0xFA	; 250
    1c1c:	54 e4       	ldi	r21, 0x44	; 68
    1c1e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	8b a3       	std	Y+35, r24	; 0x23
    1c28:	9c a3       	std	Y+36, r25	; 0x24
    1c2a:	ad a3       	std	Y+37, r26	; 0x25
    1c2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c30:	7c a1       	ldd	r23, Y+36	; 0x24
    1c32:	8d a1       	ldd	r24, Y+37	; 0x25
    1c34:	9e a1       	ldd	r25, Y+38	; 0x26
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e8       	ldi	r20, 0x80	; 128
    1c3c:	5f e3       	ldi	r21, 0x3F	; 63
    1c3e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1c42:	88 23       	and	r24, r24
    1c44:	2c f4       	brge	.+10     	; 0x1c50 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	9a a3       	std	Y+34, r25	; 0x22
    1c4c:	89 a3       	std	Y+33, r24	; 0x21
    1c4e:	3f c0       	rjmp	.+126    	; 0x1cce <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1c50:	6b a1       	ldd	r22, Y+35	; 0x23
    1c52:	7c a1       	ldd	r23, Y+36	; 0x24
    1c54:	8d a1       	ldd	r24, Y+37	; 0x25
    1c56:	9e a1       	ldd	r25, Y+38	; 0x26
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	3f ef       	ldi	r19, 0xFF	; 255
    1c5c:	4f e7       	ldi	r20, 0x7F	; 127
    1c5e:	57 e4       	ldi	r21, 0x47	; 71
    1c60:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1c64:	18 16       	cp	r1, r24
    1c66:	4c f5       	brge	.+82     	; 0x1cba <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c68:	6f a1       	ldd	r22, Y+39	; 0x27
    1c6a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c6c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e2       	ldi	r20, 0x20	; 32
    1c76:	51 e4       	ldi	r21, 0x41	; 65
    1c78:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9a a3       	std	Y+34, r25	; 0x22
    1c8e:	89 a3       	std	Y+33, r24	; 0x21
    1c90:	0f c0       	rjmp	.+30     	; 0x1cb0 <LCD_displayCharacter+0x1c0>
    1c92:	88 ec       	ldi	r24, 0xC8	; 200
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	98 a3       	std	Y+32, r25	; 0x20
    1c98:	8f 8f       	std	Y+31, r24	; 0x1f
    1c9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c9c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <LCD_displayCharacter+0x1ae>
    1ca2:	98 a3       	std	Y+32, r25	; 0x20
    1ca4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca8:	9a a1       	ldd	r25, Y+34	; 0x22
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	9a a3       	std	Y+34, r25	; 0x22
    1cae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	69 f7       	brne	.-38     	; 0x1c92 <LCD_displayCharacter+0x1a2>
    1cb8:	14 c0       	rjmp	.+40     	; 0x1ce2 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cba:	6b a1       	ldd	r22, Y+35	; 0x23
    1cbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9a a3       	std	Y+34, r25	; 0x22
    1ccc:	89 a3       	std	Y+33, r24	; 0x21
    1cce:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd2:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd4:	8d 8f       	std	Y+29, r24	; 0x1d
    1cd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_displayCharacter+0x1ea>
    1cde:	9e 8f       	std	Y+30, r25	; 0x1e
    1ce0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	69 ad       	ldd	r22, Y+57	; 0x39
    1ce6:	0e 94 81 09 	call	0x1302	; 0x1302 <GPIO_writePort>
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	a0 e8       	ldi	r26, 0x80	; 128
    1cf0:	bf e3       	ldi	r27, 0x3F	; 63
    1cf2:	89 8f       	std	Y+25, r24	; 0x19
    1cf4:	9a 8f       	std	Y+26, r25	; 0x1a
    1cf6:	ab 8f       	std	Y+27, r26	; 0x1b
    1cf8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfa:	69 8d       	ldd	r22, Y+25	; 0x19
    1cfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	4a ef       	ldi	r20, 0xFA	; 250
    1d08:	54 e4       	ldi	r21, 0x44	; 68
    1d0a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	8d 8b       	std	Y+21, r24	; 0x15
    1d14:	9e 8b       	std	Y+22, r25	; 0x16
    1d16:	af 8b       	std	Y+23, r26	; 0x17
    1d18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d20:	98 8d       	ldd	r25, Y+24	; 0x18
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e8       	ldi	r20, 0x80	; 128
    1d28:	5f e3       	ldi	r21, 0x3F	; 63
    1d2a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1d2e:	88 23       	and	r24, r24
    1d30:	2c f4       	brge	.+10     	; 0x1d3c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9c 8b       	std	Y+20, r25	; 0x14
    1d38:	8b 8b       	std	Y+19, r24	; 0x13
    1d3a:	3f c0       	rjmp	.+126    	; 0x1dba <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1d3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d40:	8f 89       	ldd	r24, Y+23	; 0x17
    1d42:	98 8d       	ldd	r25, Y+24	; 0x18
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	3f ef       	ldi	r19, 0xFF	; 255
    1d48:	4f e7       	ldi	r20, 0x7F	; 127
    1d4a:	57 e4       	ldi	r21, 0x47	; 71
    1d4c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d50:	18 16       	cp	r1, r24
    1d52:	4c f5       	brge	.+82     	; 0x1da6 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d54:	69 8d       	ldd	r22, Y+25	; 0x19
    1d56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e2       	ldi	r20, 0x20	; 32
    1d62:	51 e4       	ldi	r21, 0x41	; 65
    1d64:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	cd 01       	movw	r24, r26
    1d70:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9c 8b       	std	Y+20, r25	; 0x14
    1d7a:	8b 8b       	std	Y+19, r24	; 0x13
    1d7c:	0f c0       	rjmp	.+30     	; 0x1d9c <LCD_displayCharacter+0x2ac>
    1d7e:	88 ec       	ldi	r24, 0xC8	; 200
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9a 8b       	std	Y+18, r25	; 0x12
    1d84:	89 8b       	std	Y+17, r24	; 0x11
    1d86:	89 89       	ldd	r24, Y+17	; 0x11
    1d88:	9a 89       	ldd	r25, Y+18	; 0x12
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_displayCharacter+0x29a>
    1d8e:	9a 8b       	std	Y+18, r25	; 0x12
    1d90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d92:	8b 89       	ldd	r24, Y+19	; 0x13
    1d94:	9c 89       	ldd	r25, Y+20	; 0x14
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	9c 8b       	std	Y+20, r25	; 0x14
    1d9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	69 f7       	brne	.-38     	; 0x1d7e <LCD_displayCharacter+0x28e>
    1da4:	14 c0       	rjmp	.+40     	; 0x1dce <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da6:	6d 89       	ldd	r22, Y+21	; 0x15
    1da8:	7e 89       	ldd	r23, Y+22	; 0x16
    1daa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dac:	98 8d       	ldd	r25, Y+24	; 0x18
    1dae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	9c 8b       	std	Y+20, r25	; 0x14
    1db8:	8b 8b       	std	Y+19, r24	; 0x13
    1dba:	8b 89       	ldd	r24, Y+19	; 0x13
    1dbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbe:	98 8b       	std	Y+16, r25	; 0x10
    1dc0:	8f 87       	std	Y+15, r24	; 0x0f
    1dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc4:	98 89       	ldd	r25, Y+16	; 0x10
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <LCD_displayCharacter+0x2d6>
    1dca:	98 8b       	std	Y+16, r25	; 0x10
    1dcc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <GPIO_writePin>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 e8       	ldi	r26, 0x80	; 128
    1dde:	bf e3       	ldi	r27, 0x3F	; 63
    1de0:	8b 87       	std	Y+11, r24	; 0x0b
    1de2:	9c 87       	std	Y+12, r25	; 0x0c
    1de4:	ad 87       	std	Y+13, r26	; 0x0d
    1de6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a ef       	ldi	r20, 0xFA	; 250
    1df6:	54 e4       	ldi	r21, 0x44	; 68
    1df8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	8f 83       	std	Y+7, r24	; 0x07
    1e02:	98 87       	std	Y+8, r25	; 0x08
    1e04:	a9 87       	std	Y+9, r26	; 0x09
    1e06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e08:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0a:	78 85       	ldd	r23, Y+8	; 0x08
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2c:	78 85       	ldd	r23, Y+8	; 0x08
    1e2e:	89 85       	ldd	r24, Y+9	; 0x09
    1e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <LCD_displayCharacter+0x39a>
    1e6c:	88 ec       	ldi	r24, 0xC8	; 200
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <LCD_displayCharacter+0x388>
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <LCD_displayCharacter+0x37c>
    1e92:	14 c0       	rjmp	.+40     	; 0x1ebc <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_displayCharacter+0x3c4>
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ebc:	e9 96       	adiw	r28, 0x39	; 57
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <LCD_displayString>:

/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <LCD_displayString+0x6>
    1ed4:	0f 92       	push	r0
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	9b 83       	std	Y+3, r25	; 0x03
    1edc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ede:	19 82       	std	Y+1, r1	; 0x01
    1ee0:	0e c0       	rjmp	.+28     	; 0x1efe <LCD_displayString+0x30>
	while (Str[i] != '\0') {
		LCD_displayCharacter(Str[i]);
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	9b 81       	ldd	r25, Y+3	; 0x03
    1eec:	fc 01       	movw	r30, r24
    1eee:	e2 0f       	add	r30, r18
    1ef0:	f3 1f       	adc	r31, r19
    1ef2:	80 81       	ld	r24, Z
    1ef4:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LCD_displayCharacter>
		i++;
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	8f 5f       	subi	r24, 0xFF	; 255
    1efc:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	fc 01       	movw	r30, r24
    1f0a:	e2 0f       	add	r30, r18
    1f0c:	f3 1f       	adc	r31, r19
    1f0e:	80 81       	ld	r24, Z
    1f10:	88 23       	and	r24, r24
    1f12:	39 f7       	brne	.-50     	; 0x1ee2 <LCD_displayString+0x14>
	 {
	 LCD_displayCharacter(*Str);
	 Str++;
	 }
	 *********************************************************/
}
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col) {
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <LCD_moveCursor+0x6>
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <LCD_moveCursor+0x8>
    1f28:	0f 92       	push	r0
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	8a 83       	std	Y+2, r24	; 0x02
    1f30:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (row) {
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	3d 83       	std	Y+5, r19	; 0x05
    1f3a:	2c 83       	std	Y+4, r18	; 0x04
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f40:	81 30       	cpi	r24, 0x01	; 1
    1f42:	91 05       	cpc	r25, r1
    1f44:	c1 f0       	breq	.+48     	; 0x1f76 <LCD_moveCursor+0x56>
    1f46:	2c 81       	ldd	r18, Y+4	; 0x04
    1f48:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4a:	22 30       	cpi	r18, 0x02	; 2
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <LCD_moveCursor+0x3a>
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	9d 81       	ldd	r25, Y+5	; 0x05
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	61 f0       	breq	.+24     	; 0x1f70 <LCD_moveCursor+0x50>
    1f58:	19 c0       	rjmp	.+50     	; 0x1f8c <LCD_moveCursor+0x6c>
    1f5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f5e:	22 30       	cpi	r18, 0x02	; 2
    1f60:	31 05       	cpc	r19, r1
    1f62:	69 f0       	breq	.+26     	; 0x1f7e <LCD_moveCursor+0x5e>
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	9d 81       	ldd	r25, Y+5	; 0x05
    1f68:	83 30       	cpi	r24, 0x03	; 3
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	61 f0       	breq	.+24     	; 0x1f86 <LCD_moveCursor+0x66>
    1f6e:	0e c0       	rjmp	.+28     	; 0x1f8c <LCD_moveCursor+0x6c>
	case 0:
		lcd_memory_address = col;
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	0b c0       	rjmp	.+22     	; 0x1f8c <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	80 5c       	subi	r24, 0xC0	; 192
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	07 c0       	rjmp	.+14     	; 0x1f8c <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	80 5f       	subi	r24, 0xF0	; 240
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	03 c0       	rjmp	.+6      	; 0x1f8c <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	80 5b       	subi	r24, 0xB0	; 176
    1f8a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	80 68       	ori	r24, 0x80	; 128
    1f90:	0e 94 89 0b 	call	0x1712	; 0x1712 <LCD_sendCommand>
}
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <LCD_displayStringRowColumn+0x6>
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <LCD_displayStringRowColumn+0x8>
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	6a 83       	std	Y+2, r22	; 0x02
    1fb4:	5c 83       	std	Y+4, r21	; 0x04
    1fb6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	6a 81       	ldd	r22, Y+2	; 0x02
    1fbc:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_displayString>
}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data) {
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	62 97       	sbiw	r28, 0x12	; 18
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	9a 8b       	std	Y+18, r25	; 0x12
    1fec:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1fee:	89 89       	ldd	r24, Y+17	; 0x11
    1ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff2:	9e 01       	movw	r18, r28
    1ff4:	2f 5f       	subi	r18, 0xFF	; 255
    1ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff8:	b9 01       	movw	r22, r18
    1ffa:	4a e0       	ldi	r20, 0x0A	; 10
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	0e 94 12 12 	call	0x2424	; 0x2424 <itoa>
	LCD_displayString(buff); /* Display the string */
    2002:	ce 01       	movw	r24, r28
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_displayString>

}
    200a:	62 96       	adiw	r28, 0x12	; 18
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <LCD_floatToString>:

/*
 * Description :
 * Display the required Float decimal value on the screen
 */
void LCD_floatToString(float32 data) {
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	64 97       	sbiw	r28, 0x14	; 20
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	69 8b       	std	Y+17, r22	; 0x11
    2036:	7a 8b       	std	Y+18, r23	; 0x12
    2038:	8b 8b       	std	Y+19, r24	; 0x13
    203a:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; /* String to hold the ascii result */
	dtostrf(data, 6, 3, buff); /* Use dtostrf C function to convert the data to its corresponding ASCII value, 10 for float decimal */
    203c:	89 89       	ldd	r24, Y+17	; 0x11
    203e:	9a 89       	ldd	r25, Y+18	; 0x12
    2040:	ab 89       	ldd	r26, Y+19	; 0x13
    2042:	bc 89       	ldd	r27, Y+20	; 0x14
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	46 e0       	ldi	r20, 0x06	; 6
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	23 e0       	ldi	r18, 0x03	; 3
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	fe 01       	movw	r30, r28
    2052:	31 96       	adiw	r30, 0x01	; 1
    2054:	8f 01       	movw	r16, r30
    2056:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <dtostrf>
	LCD_displayString(buff); /* Display the string */
    205a:	ce 01       	movw	r24, r28
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_displayString>
}
    2062:	64 96       	adiw	r28, 0x14	; 20
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	08 95       	ret

00002078 <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void) {
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	0e 94 89 0b 	call	0x1712	; 0x1712 <LCD_sendCommand>
}
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <Ultrasonic_init>:
/*Description
 ➢ Initialize the ICU driver as required.
 ➢ Setup the ICU call back function.
 ➢ Setup the direction for the trigger pin as output pin through the
 GPIO driver*/
void Ultrasonic_init(void) {
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	00 d0       	rcall	.+0      	; 0x2092 <Ultrasonic_init+0x6>
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
	/*config the Module*/
	ICU_ConfigType icu_init = { F_CPU_8, RAISING };
    2096:	82 e0       	ldi	r24, 0x02	; 2
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	8a 83       	std	Y+2, r24	; 0x02
	ICU_init(&icu_init);
    209e:	ce 01       	movw	r24, r28
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	0e 94 3d 0a 	call	0x147a	; 0x147a <ICU_init>
	/*call back the edge processing*/
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    20a6:	88 e5       	ldi	r24, 0x58	; 88
    20a8:	91 e1       	ldi	r25, 0x11	; 17
    20aa:	0e 94 86 0a 	call	0x150c	; 0x150c <ICU_setCallBack>
	/*trigger pin*/
	GPIO_setupPinDirection(PORTB_ID, PIN5_ID, PIN_OUTPUT);
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	65 e0       	ldi	r22, 0x05	; 5
    20b2:	41 e0       	ldi	r20, 0x01	; 1
    20b4:	0e 94 cc 06 	call	0xd98	; 0xd98 <GPIO_setupPinDirection>
}
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <Ultrasonic_Trigger>:
/*Description
 ➢ Send the Trigger pulse to the ultrasonic.
 */
void Ultrasonic_Trigger(void) {
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	68 97       	sbiw	r28, 0x18	; 24
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(PORTB_ID, PIN5_ID, LOGIC_HIGH);
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	65 e0       	ldi	r22, 0x05	; 5
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <GPIO_writePin>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a0 ef       	ldi	r26, 0xF0	; 240
    20e6:	b1 e4       	ldi	r27, 0x41	; 65
    20e8:	8d 8b       	std	Y+21, r24	; 0x15
    20ea:	9e 8b       	std	Y+22, r25	; 0x16
    20ec:	af 8b       	std	Y+23, r26	; 0x17
    20ee:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20f0:	6d 89       	ldd	r22, Y+21	; 0x15
    20f2:	7e 89       	ldd	r23, Y+22	; 0x16
    20f4:	8f 89       	ldd	r24, Y+23	; 0x17
    20f6:	98 8d       	ldd	r25, Y+24	; 0x18
    20f8:	2b ea       	ldi	r18, 0xAB	; 171
    20fa:	3a ea       	ldi	r19, 0xAA	; 170
    20fc:	4a e2       	ldi	r20, 0x2A	; 42
    20fe:	50 e4       	ldi	r21, 0x40	; 64
    2100:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	89 8b       	std	Y+17, r24	; 0x11
    210a:	9a 8b       	std	Y+18, r25	; 0x12
    210c:	ab 8b       	std	Y+19, r26	; 0x13
    210e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2110:	69 89       	ldd	r22, Y+17	; 0x11
    2112:	7a 89       	ldd	r23, Y+18	; 0x12
    2114:	8b 89       	ldd	r24, Y+19	; 0x13
    2116:	9c 89       	ldd	r25, Y+20	; 0x14
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e8       	ldi	r20, 0x80	; 128
    211e:	5f e3       	ldi	r21, 0x3F	; 63
    2120:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2124:	88 23       	and	r24, r24
    2126:	1c f4       	brge	.+6      	; 0x212e <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	88 8b       	std	Y+16, r24	; 0x10
    212c:	91 c0       	rjmp	.+290    	; 0x2250 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    212e:	69 89       	ldd	r22, Y+17	; 0x11
    2130:	7a 89       	ldd	r23, Y+18	; 0x12
    2132:	8b 89       	ldd	r24, Y+19	; 0x13
    2134:	9c 89       	ldd	r25, Y+20	; 0x14
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	53 e4       	ldi	r21, 0x43	; 67
    213e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	0c f0       	brlt	.+2      	; 0x2148 <Ultrasonic_Trigger+0x86>
    2146:	7b c0       	rjmp	.+246    	; 0x223e <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2148:	6d 89       	ldd	r22, Y+21	; 0x15
    214a:	7e 89       	ldd	r23, Y+22	; 0x16
    214c:	8f 89       	ldd	r24, Y+23	; 0x17
    214e:	98 8d       	ldd	r25, Y+24	; 0x18
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a e7       	ldi	r20, 0x7A	; 122
    2156:	54 e4       	ldi	r21, 0x44	; 68
    2158:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	8c 87       	std	Y+12, r24	; 0x0c
    2162:	9d 87       	std	Y+13, r25	; 0x0d
    2164:	ae 87       	std	Y+14, r26	; 0x0e
    2166:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2168:	6c 85       	ldd	r22, Y+12	; 0x0c
    216a:	7d 85       	ldd	r23, Y+13	; 0x0d
    216c:	8e 85       	ldd	r24, Y+14	; 0x0e
    216e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	4a ef       	ldi	r20, 0xFA	; 250
    2176:	54 e4       	ldi	r21, 0x44	; 68
    2178:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	88 87       	std	Y+8, r24	; 0x08
    2182:	99 87       	std	Y+9, r25	; 0x09
    2184:	aa 87       	std	Y+10, r26	; 0x0a
    2186:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2188:	68 85       	ldd	r22, Y+8	; 0x08
    218a:	79 85       	ldd	r23, Y+9	; 0x09
    218c:	8a 85       	ldd	r24, Y+10	; 0x0a
    218e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e8       	ldi	r20, 0x80	; 128
    2196:	5f e3       	ldi	r21, 0x3F	; 63
    2198:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    219c:	88 23       	and	r24, r24
    219e:	2c f4       	brge	.+10     	; 0x21aa <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	9f 83       	std	Y+7, r25	; 0x07
    21a6:	8e 83       	std	Y+6, r24	; 0x06
    21a8:	3f c0       	rjmp	.+126    	; 0x2228 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    21aa:	68 85       	ldd	r22, Y+8	; 0x08
    21ac:	79 85       	ldd	r23, Y+9	; 0x09
    21ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    21b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	3f ef       	ldi	r19, 0xFF	; 255
    21b6:	4f e7       	ldi	r20, 0x7F	; 127
    21b8:	57 e4       	ldi	r21, 0x47	; 71
    21ba:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    21be:	18 16       	cp	r1, r24
    21c0:	4c f5       	brge	.+82     	; 0x2214 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    21c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    21c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    21c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e2       	ldi	r20, 0x20	; 32
    21d0:	51 e4       	ldi	r21, 0x41	; 65
    21d2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9f 83       	std	Y+7, r25	; 0x07
    21e8:	8e 83       	std	Y+6, r24	; 0x06
    21ea:	0f c0       	rjmp	.+30     	; 0x220a <Ultrasonic_Trigger+0x148>
    21ec:	88 ec       	ldi	r24, 0xC8	; 200
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9d 83       	std	Y+5, r25	; 0x05
    21f2:	8c 83       	std	Y+4, r24	; 0x04
    21f4:	8c 81       	ldd	r24, Y+4	; 0x04
    21f6:	9d 81       	ldd	r25, Y+5	; 0x05
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <Ultrasonic_Trigger+0x136>
    21fc:	9d 83       	std	Y+5, r25	; 0x05
    21fe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2200:	8e 81       	ldd	r24, Y+6	; 0x06
    2202:	9f 81       	ldd	r25, Y+7	; 0x07
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	9f 83       	std	Y+7, r25	; 0x07
    2208:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220a:	8e 81       	ldd	r24, Y+6	; 0x06
    220c:	9f 81       	ldd	r25, Y+7	; 0x07
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	69 f7       	brne	.-38     	; 0x21ec <Ultrasonic_Trigger+0x12a>
    2212:	24 c0       	rjmp	.+72     	; 0x225c <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2214:	68 85       	ldd	r22, Y+8	; 0x08
    2216:	79 85       	ldd	r23, Y+9	; 0x09
    2218:	8a 85       	ldd	r24, Y+10	; 0x0a
    221a:	9b 85       	ldd	r25, Y+11	; 0x0b
    221c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9f 83       	std	Y+7, r25	; 0x07
    2226:	8e 83       	std	Y+6, r24	; 0x06
    2228:	8e 81       	ldd	r24, Y+6	; 0x06
    222a:	9f 81       	ldd	r25, Y+7	; 0x07
    222c:	9b 83       	std	Y+3, r25	; 0x03
    222e:	8a 83       	std	Y+2, r24	; 0x02
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	9b 81       	ldd	r25, Y+3	; 0x03
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <Ultrasonic_Trigger+0x172>
    2238:	9b 83       	std	Y+3, r25	; 0x03
    223a:	8a 83       	std	Y+2, r24	; 0x02
    223c:	0f c0       	rjmp	.+30     	; 0x225c <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    223e:	69 89       	ldd	r22, Y+17	; 0x11
    2240:	7a 89       	ldd	r23, Y+18	; 0x12
    2242:	8b 89       	ldd	r24, Y+19	; 0x13
    2244:	9c 89       	ldd	r25, Y+20	; 0x14
    2246:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	88 8b       	std	Y+16, r24	; 0x10
    2250:	88 89       	ldd	r24, Y+16	; 0x10
    2252:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	8a 95       	dec	r24
    2258:	f1 f7       	brne	.-4      	; 0x2256 <Ultrasonic_Trigger+0x194>
    225a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(30);
	GPIO_writePin(PORTB_ID, PIN5_ID, LOGIC_LOW);
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	65 e0       	ldi	r22, 0x05	; 5
    2260:	40 e0       	ldi	r20, 0x00	; 0
    2262:	0e 94 b7 07 	call	0xf6e	; 0xf6e <GPIO_writePin>
}
    2266:	68 96       	adiw	r28, 0x18	; 24
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <Ultrasonic_readDistance>:
/*Description
 ➢ Send the trigger pulse by using Ultrasonic_Trigger function.
 ➢ Start the measurements by the ICU from this moment.*/
uint16 Ultrasonic_readDistance(void) {
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
	/*to trigger the ultrasonic*/
	Ultrasonic_Trigger();
    2280:	0e 94 61 10 	call	0x20c2	; 0x20c2 <Ultrasonic_Trigger>
	 the difference (error) = 3822-3759 = 63
	 error % = 63/58.8 = 1
	 -----------------------
	 so we will add 1 to equ to skip error
	 */
	g_distance = (g_ultrasonicRead / 58) + 1;
    2284:	80 91 7a 00 	lds	r24, 0x007A
    2288:	90 91 7b 00 	lds	r25, 0x007B
    228c:	2a e3       	ldi	r18, 0x3A	; 58
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	b9 01       	movw	r22, r18
    2292:	0e 94 a6 11 	call	0x234c	; 0x234c <__udivmodhi4>
    2296:	cb 01       	movw	r24, r22
    2298:	01 96       	adiw	r24, 0x01	; 1
    229a:	90 93 7e 00 	sts	0x007E, r25
    229e:	80 93 7d 00 	sts	0x007D, r24
	return g_distance;
    22a2:	80 91 7d 00 	lds	r24, 0x007D
    22a6:	90 91 7e 00 	lds	r25, 0x007E
}
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <Ultrasonic_edgeProcessing>:
/*Description
 ➢ This is the call back function called by the ICU driver.
 ➢ This is used to calculate the high time (pulse time) generated by
 the ultrasonic sensor*/
void Ultrasonic_edgeProcessing(void) {
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    22b8:	80 91 7c 00 	lds	r24, 0x007C
    22bc:	8f 5f       	subi	r24, 0xFF	; 255
    22be:	80 93 7c 00 	sts	0x007C, r24
	if (g_edgeCount == 1) {
    22c2:	80 91 7c 00 	lds	r24, 0x007C
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	31 f4       	brne	.+12     	; 0x22d6 <Ultrasonic_edgeProcessing+0x26>
		/*Clear ICU*/
		ICU_clearTimerValue();
    22ca:	0e 94 c2 0a 	call	0x1584	; 0x1584 <ICU_clearTimerValue>
		/*start count the real time*/
		ICU_setEdgeDetectionType(FALLING);
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	0e 94 98 0a 	call	0x1530	; 0x1530 <ICU_setEdgeDetectionType>
    22d4:	11 c0       	rjmp	.+34     	; 0x22f8 <Ultrasonic_edgeProcessing+0x48>
	} else if (g_edgeCount == 2) {
    22d6:	80 91 7c 00 	lds	r24, 0x007C
    22da:	82 30       	cpi	r24, 0x02	; 2
    22dc:	69 f4       	brne	.+26     	; 0x22f8 <Ultrasonic_edgeProcessing+0x48>
		/* Store the High time value */
		g_ultrasonicRead = ICU_getInputCaptureValue();
    22de:	0e 94 b7 0a 	call	0x156e	; 0x156e <ICU_getInputCaptureValue>
    22e2:	90 93 7b 00 	sts	0x007B, r25
    22e6:	80 93 7a 00 	sts	0x007A, r24
		/*Clear ICU*/
		ICU_clearTimerValue();
    22ea:	0e 94 c2 0a 	call	0x1584	; 0x1584 <ICU_clearTimerValue>
		/* Detect rising edge */
		ICU_setEdgeDetectionType(RAISING);
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	0e 94 98 0a 	call	0x1530	; 0x1530 <ICU_setEdgeDetectionType>
		/*recount the counter*/
		g_edgeCount = 0;
    22f4:	10 92 7c 00 	sts	0x007C, r1

	}
}
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <main>:
 ===================================================
 */
#include<avr/io.h>
#include "../hal/lcd.h"
#include "../hal/ultrasonic.h"
int main(void) {
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <main+0x6>
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
	/*Enable Global interput*/
	SREG |= (1 << 7);
    2308:	af e5       	ldi	r26, 0x5F	; 95
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	ef e5       	ldi	r30, 0x5F	; 95
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	80 68       	ori	r24, 0x80	; 128
    2314:	8c 93       	st	X, r24
	Ultrasonic_init();
    2316:	0e 94 46 10 	call	0x208c	; 0x208c <Ultrasonic_init>
	LCD_init();
    231a:	0e 94 ed 0a 	call	0x15da	; 0x15da <LCD_init>
	LCD_displayString("Distance= ");
    231e:	80 e6       	ldi	r24, 0x60	; 96
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_displayString>
	uint16 distance = 0;
    2326:	1a 82       	std	Y+2, r1	; 0x02
    2328:	19 82       	std	Y+1, r1	; 0x01
	for (;;) {
		distance = Ultrasonic_readDistance();
    232a:	0e 94 3c 11 	call	0x2278	; 0x2278 <Ultrasonic_readDistance>
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(0, 10);
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	6a e0       	ldi	r22, 0x0A	; 10
    2336:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <LCD_moveCursor>
		LCD_intgerToString(distance);
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	9a 81       	ldd	r25, Y+2	; 0x02
    233e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <LCD_intgerToString>
		LCD_displayString("cm ");
    2342:	8b e6       	ldi	r24, 0x6B	; 107
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	0e 94 67 0f 	call	0x1ece	; 0x1ece <LCD_displayString>
    234a:	ef cf       	rjmp	.-34     	; 0x232a <main+0x2c>

0000234c <__udivmodhi4>:
    234c:	aa 1b       	sub	r26, r26
    234e:	bb 1b       	sub	r27, r27
    2350:	51 e1       	ldi	r21, 0x11	; 17
    2352:	07 c0       	rjmp	.+14     	; 0x2362 <__udivmodhi4_ep>

00002354 <__udivmodhi4_loop>:
    2354:	aa 1f       	adc	r26, r26
    2356:	bb 1f       	adc	r27, r27
    2358:	a6 17       	cp	r26, r22
    235a:	b7 07       	cpc	r27, r23
    235c:	10 f0       	brcs	.+4      	; 0x2362 <__udivmodhi4_ep>
    235e:	a6 1b       	sub	r26, r22
    2360:	b7 0b       	sbc	r27, r23

00002362 <__udivmodhi4_ep>:
    2362:	88 1f       	adc	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	5a 95       	dec	r21
    2368:	a9 f7       	brne	.-22     	; 0x2354 <__udivmodhi4_loop>
    236a:	80 95       	com	r24
    236c:	90 95       	com	r25
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	08 95       	ret

00002374 <__prologue_saves__>:
    2374:	2f 92       	push	r2
    2376:	3f 92       	push	r3
    2378:	4f 92       	push	r4
    237a:	5f 92       	push	r5
    237c:	6f 92       	push	r6
    237e:	7f 92       	push	r7
    2380:	8f 92       	push	r8
    2382:	9f 92       	push	r9
    2384:	af 92       	push	r10
    2386:	bf 92       	push	r11
    2388:	cf 92       	push	r12
    238a:	df 92       	push	r13
    238c:	ef 92       	push	r14
    238e:	ff 92       	push	r15
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	ca 1b       	sub	r28, r26
    239e:	db 0b       	sbc	r29, r27
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	09 94       	ijmp

000023ac <__epilogue_restores__>:
    23ac:	2a 88       	ldd	r2, Y+18	; 0x12
    23ae:	39 88       	ldd	r3, Y+17	; 0x11
    23b0:	48 88       	ldd	r4, Y+16	; 0x10
    23b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    23b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    23b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    23b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    23ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    23bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    23be:	b9 84       	ldd	r11, Y+9	; 0x09
    23c0:	c8 84       	ldd	r12, Y+8	; 0x08
    23c2:	df 80       	ldd	r13, Y+7	; 0x07
    23c4:	ee 80       	ldd	r14, Y+6	; 0x06
    23c6:	fd 80       	ldd	r15, Y+5	; 0x05
    23c8:	0c 81       	ldd	r16, Y+4	; 0x04
    23ca:	1b 81       	ldd	r17, Y+3	; 0x03
    23cc:	aa 81       	ldd	r26, Y+2	; 0x02
    23ce:	b9 81       	ldd	r27, Y+1	; 0x01
    23d0:	ce 0f       	add	r28, r30
    23d2:	d1 1d       	adc	r29, r1
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	ed 01       	movw	r28, r26
    23e0:	08 95       	ret

000023e2 <dtostrf>:
    23e2:	ef 92       	push	r14
    23e4:	ff 92       	push	r15
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	f2 2f       	mov	r31, r18
    23ec:	f0 2e       	mov	r15, r16
    23ee:	47 fd       	sbrc	r20, 7
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <dtostrf+0x14>
    23f2:	e4 e0       	ldi	r30, 0x04	; 4
    23f4:	01 c0       	rjmp	.+2      	; 0x23f8 <dtostrf+0x16>
    23f6:	e4 e1       	ldi	r30, 0x14	; 20
    23f8:	24 2f       	mov	r18, r20
    23fa:	33 27       	eor	r19, r19
    23fc:	27 fd       	sbrc	r18, 7
    23fe:	30 95       	com	r19
    2400:	37 ff       	sbrs	r19, 7
    2402:	03 c0       	rjmp	.+6      	; 0x240a <dtostrf+0x28>
    2404:	30 95       	com	r19
    2406:	21 95       	neg	r18
    2408:	3f 4f       	sbci	r19, 0xFF	; 255
    240a:	4f 2d       	mov	r20, r15
    240c:	51 2f       	mov	r21, r17
    240e:	0f 2f       	mov	r16, r31
    2410:	ee 2e       	mov	r14, r30
    2412:	0e 94 33 12 	call	0x2466	; 0x2466 <dtoa_prf>
    2416:	8f 2d       	mov	r24, r15
    2418:	91 2f       	mov	r25, r17
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	ff 90       	pop	r15
    2420:	ef 90       	pop	r14
    2422:	08 95       	ret

00002424 <itoa>:
    2424:	fb 01       	movw	r30, r22
    2426:	9f 01       	movw	r18, r30
    2428:	e8 94       	clt
    242a:	42 30       	cpi	r20, 0x02	; 2
    242c:	c4 f0       	brlt	.+48     	; 0x245e <itoa+0x3a>
    242e:	45 32       	cpi	r20, 0x25	; 37
    2430:	b4 f4       	brge	.+44     	; 0x245e <itoa+0x3a>
    2432:	4a 30       	cpi	r20, 0x0A	; 10
    2434:	29 f4       	brne	.+10     	; 0x2440 <itoa+0x1c>
    2436:	97 fb       	bst	r25, 7
    2438:	1e f4       	brtc	.+6      	; 0x2440 <itoa+0x1c>
    243a:	90 95       	com	r25
    243c:	81 95       	neg	r24
    243e:	9f 4f       	sbci	r25, 0xFF	; 255
    2440:	64 2f       	mov	r22, r20
    2442:	77 27       	eor	r23, r23
    2444:	0e 94 a6 11 	call	0x234c	; 0x234c <__udivmodhi4>
    2448:	80 5d       	subi	r24, 0xD0	; 208
    244a:	8a 33       	cpi	r24, 0x3A	; 58
    244c:	0c f0       	brlt	.+2      	; 0x2450 <itoa+0x2c>
    244e:	89 5d       	subi	r24, 0xD9	; 217
    2450:	81 93       	st	Z+, r24
    2452:	cb 01       	movw	r24, r22
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	a1 f7       	brne	.-24     	; 0x2440 <itoa+0x1c>
    2458:	16 f4       	brtc	.+4      	; 0x245e <itoa+0x3a>
    245a:	5d e2       	ldi	r21, 0x2D	; 45
    245c:	51 93       	st	Z+, r21
    245e:	10 82       	st	Z, r1
    2460:	c9 01       	movw	r24, r18
    2462:	0c 94 6d 14 	jmp	0x28da	; 0x28da <strrev>

00002466 <dtoa_prf>:
    2466:	a9 e0       	ldi	r26, 0x09	; 9
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e9 e3       	ldi	r30, 0x39	; 57
    246c:	f2 e1       	ldi	r31, 0x12	; 18
    246e:	0c 94 be 11 	jmp	0x237c	; 0x237c <__prologue_saves__+0x8>
    2472:	6a 01       	movw	r12, r20
    2474:	12 2f       	mov	r17, r18
    2476:	a0 2e       	mov	r10, r16
    2478:	be 2c       	mov	r11, r14
    247a:	2b e3       	ldi	r18, 0x3B	; 59
    247c:	20 17       	cp	r18, r16
    247e:	18 f4       	brcc	.+6      	; 0x2486 <dtoa_prf+0x20>
    2480:	2c e3       	ldi	r18, 0x3C	; 60
    2482:	92 2e       	mov	r9, r18
    2484:	02 c0       	rjmp	.+4      	; 0x248a <dtoa_prf+0x24>
    2486:	90 2e       	mov	r9, r16
    2488:	93 94       	inc	r9
    248a:	ae 01       	movw	r20, r28
    248c:	4f 5f       	subi	r20, 0xFF	; 255
    248e:	5f 4f       	sbci	r21, 0xFF	; 255
    2490:	27 e0       	ldi	r18, 0x07	; 7
    2492:	09 2d       	mov	r16, r9
    2494:	0e 94 95 13 	call	0x272a	; 0x272a <__ftoa_engine>
    2498:	bc 01       	movw	r22, r24
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	e8 2e       	mov	r14, r24
    249e:	ff 24       	eor	r15, r15
    24a0:	c7 01       	movw	r24, r14
    24a2:	89 70       	andi	r24, 0x09	; 9
    24a4:	90 70       	andi	r25, 0x00	; 0
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	11 f4       	brne	.+4      	; 0x24ae <dtoa_prf+0x48>
    24aa:	ad e2       	ldi	r26, 0x2D	; 45
    24ac:	09 c0       	rjmp	.+18     	; 0x24c0 <dtoa_prf+0x5a>
    24ae:	b1 fe       	sbrs	r11, 1
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <dtoa_prf+0x50>
    24b2:	ab e2       	ldi	r26, 0x2B	; 43
    24b4:	05 c0       	rjmp	.+10     	; 0x24c0 <dtoa_prf+0x5a>
    24b6:	b0 fc       	sbrc	r11, 0
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <dtoa_prf+0x58>
    24ba:	a0 e0       	ldi	r26, 0x00	; 0
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <dtoa_prf+0x5a>
    24be:	a0 e2       	ldi	r26, 0x20	; 32
    24c0:	e3 fe       	sbrs	r14, 3
    24c2:	3b c0       	rjmp	.+118    	; 0x253a <dtoa_prf+0xd4>
    24c4:	aa 23       	and	r26, r26
    24c6:	11 f4       	brne	.+4      	; 0x24cc <dtoa_prf+0x66>
    24c8:	23 e0       	ldi	r18, 0x03	; 3
    24ca:	01 c0       	rjmp	.+2      	; 0x24ce <dtoa_prf+0x68>
    24cc:	24 e0       	ldi	r18, 0x04	; 4
    24ce:	21 17       	cp	r18, r17
    24d0:	10 f0       	brcs	.+4      	; 0x24d6 <dtoa_prf+0x70>
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <dtoa_prf+0x74>
    24d6:	12 1b       	sub	r17, r18
    24d8:	21 2f       	mov	r18, r17
    24da:	eb 2c       	mov	r14, r11
    24dc:	b4 fe       	sbrs	r11, 4
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <dtoa_prf+0x7e>
    24e0:	32 2f       	mov	r19, r18
    24e2:	0a c0       	rjmp	.+20     	; 0x24f8 <dtoa_prf+0x92>
    24e4:	f6 01       	movw	r30, r12
    24e6:	32 2f       	mov	r19, r18
    24e8:	80 e2       	ldi	r24, 0x20	; 32
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <dtoa_prf+0x8a>
    24ec:	81 93       	st	Z+, r24
    24ee:	31 50       	subi	r19, 0x01	; 1
    24f0:	33 23       	and	r19, r19
    24f2:	e1 f7       	brne	.-8      	; 0x24ec <dtoa_prf+0x86>
    24f4:	c2 0e       	add	r12, r18
    24f6:	d1 1c       	adc	r13, r1
    24f8:	aa 23       	and	r26, r26
    24fa:	19 f0       	breq	.+6      	; 0x2502 <dtoa_prf+0x9c>
    24fc:	f6 01       	movw	r30, r12
    24fe:	a1 93       	st	Z+, r26
    2500:	6f 01       	movw	r12, r30
    2502:	f6 01       	movw	r30, r12
    2504:	31 96       	adiw	r30, 0x01	; 1
    2506:	e2 fe       	sbrs	r14, 2
    2508:	05 c0       	rjmp	.+10     	; 0x2514 <dtoa_prf+0xae>
    250a:	9e e4       	ldi	r25, 0x4E	; 78
    250c:	d6 01       	movw	r26, r12
    250e:	9c 93       	st	X, r25
    2510:	81 e4       	ldi	r24, 0x41	; 65
    2512:	04 c0       	rjmp	.+8      	; 0x251c <dtoa_prf+0xb6>
    2514:	9e e6       	ldi	r25, 0x6E	; 110
    2516:	d6 01       	movw	r26, r12
    2518:	9c 93       	st	X, r25
    251a:	81 e6       	ldi	r24, 0x61	; 97
    251c:	11 96       	adiw	r26, 0x01	; 1
    251e:	8c 93       	st	X, r24
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	32 96       	adiw	r30, 0x02	; 2
    2524:	df 01       	movw	r26, r30
    2526:	83 2f       	mov	r24, r19
    2528:	90 e2       	ldi	r25, 0x20	; 32
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <dtoa_prf+0xca>
    252c:	9d 93       	st	X+, r25
    252e:	81 50       	subi	r24, 0x01	; 1
    2530:	88 23       	and	r24, r24
    2532:	e1 f7       	brne	.-8      	; 0x252c <dtoa_prf+0xc6>
    2534:	e3 0f       	add	r30, r19
    2536:	f1 1d       	adc	r31, r1
    2538:	40 c0       	rjmp	.+128    	; 0x25ba <dtoa_prf+0x154>
    253a:	e2 fe       	sbrs	r14, 2
    253c:	42 c0       	rjmp	.+132    	; 0x25c2 <dtoa_prf+0x15c>
    253e:	aa 23       	and	r26, r26
    2540:	11 f4       	brne	.+4      	; 0x2546 <dtoa_prf+0xe0>
    2542:	23 e0       	ldi	r18, 0x03	; 3
    2544:	01 c0       	rjmp	.+2      	; 0x2548 <dtoa_prf+0xe2>
    2546:	24 e0       	ldi	r18, 0x04	; 4
    2548:	21 17       	cp	r18, r17
    254a:	10 f0       	brcs	.+4      	; 0x2550 <dtoa_prf+0xea>
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	02 c0       	rjmp	.+4      	; 0x2554 <dtoa_prf+0xee>
    2550:	12 1b       	sub	r17, r18
    2552:	21 2f       	mov	r18, r17
    2554:	eb 2c       	mov	r14, r11
    2556:	b4 fe       	sbrs	r11, 4
    2558:	02 c0       	rjmp	.+4      	; 0x255e <dtoa_prf+0xf8>
    255a:	92 2f       	mov	r25, r18
    255c:	0a c0       	rjmp	.+20     	; 0x2572 <dtoa_prf+0x10c>
    255e:	f6 01       	movw	r30, r12
    2560:	92 2f       	mov	r25, r18
    2562:	80 e2       	ldi	r24, 0x20	; 32
    2564:	02 c0       	rjmp	.+4      	; 0x256a <dtoa_prf+0x104>
    2566:	81 93       	st	Z+, r24
    2568:	91 50       	subi	r25, 0x01	; 1
    256a:	99 23       	and	r25, r25
    256c:	e1 f7       	brne	.-8      	; 0x2566 <dtoa_prf+0x100>
    256e:	c2 0e       	add	r12, r18
    2570:	d1 1c       	adc	r13, r1
    2572:	aa 23       	and	r26, r26
    2574:	19 f0       	breq	.+6      	; 0x257c <dtoa_prf+0x116>
    2576:	f6 01       	movw	r30, r12
    2578:	a1 93       	st	Z+, r26
    257a:	6f 01       	movw	r12, r30
    257c:	f6 01       	movw	r30, r12
    257e:	31 96       	adiw	r30, 0x01	; 1
    2580:	e2 fe       	sbrs	r14, 2
    2582:	08 c0       	rjmp	.+16     	; 0x2594 <dtoa_prf+0x12e>
    2584:	89 e4       	ldi	r24, 0x49	; 73
    2586:	d6 01       	movw	r26, r12
    2588:	8c 93       	st	X, r24
    258a:	8e e4       	ldi	r24, 0x4E	; 78
    258c:	11 96       	adiw	r26, 0x01	; 1
    258e:	8c 93       	st	X, r24
    2590:	86 e4       	ldi	r24, 0x46	; 70
    2592:	07 c0       	rjmp	.+14     	; 0x25a2 <dtoa_prf+0x13c>
    2594:	89 e6       	ldi	r24, 0x69	; 105
    2596:	d6 01       	movw	r26, r12
    2598:	8c 93       	st	X, r24
    259a:	8e e6       	ldi	r24, 0x6E	; 110
    259c:	11 96       	adiw	r26, 0x01	; 1
    259e:	8c 93       	st	X, r24
    25a0:	86 e6       	ldi	r24, 0x66	; 102
    25a2:	81 83       	std	Z+1, r24	; 0x01
    25a4:	32 96       	adiw	r30, 0x02	; 2
    25a6:	df 01       	movw	r26, r30
    25a8:	89 2f       	mov	r24, r25
    25aa:	20 e2       	ldi	r18, 0x20	; 32
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <dtoa_prf+0x14c>
    25ae:	2d 93       	st	X+, r18
    25b0:	81 50       	subi	r24, 0x01	; 1
    25b2:	88 23       	and	r24, r24
    25b4:	e1 f7       	brne	.-8      	; 0x25ae <dtoa_prf+0x148>
    25b6:	e9 0f       	add	r30, r25
    25b8:	f1 1d       	adc	r31, r1
    25ba:	10 82       	st	Z, r1
    25bc:	2e ef       	ldi	r18, 0xFE	; 254
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	af c0       	rjmp	.+350    	; 0x2720 <dtoa_prf+0x2ba>
    25c2:	16 16       	cp	r1, r22
    25c4:	17 06       	cpc	r1, r23
    25c6:	1c f0       	brlt	.+6      	; 0x25ce <dtoa_prf+0x168>
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	03 c0       	rjmp	.+6      	; 0x25d4 <dtoa_prf+0x16e>
    25ce:	ab 01       	movw	r20, r22
    25d0:	4f 5f       	subi	r20, 0xFF	; 255
    25d2:	5f 4f       	sbci	r21, 0xFF	; 255
    25d4:	aa 20       	and	r10, r10
    25d6:	19 f4       	brne	.+6      	; 0x25de <dtoa_prf+0x178>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	03 c0       	rjmp	.+6      	; 0x25e4 <dtoa_prf+0x17e>
    25de:	8a 2d       	mov	r24, r10
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	aa 23       	and	r26, r26
    25ea:	11 f0       	breq	.+4      	; 0x25f0 <dtoa_prf+0x18a>
    25ec:	21 e0       	ldi	r18, 0x01	; 1
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	24 0f       	add	r18, r20
    25f2:	35 1f       	adc	r19, r21
    25f4:	28 0f       	add	r18, r24
    25f6:	39 1f       	adc	r19, r25
    25f8:	81 2f       	mov	r24, r17
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	28 17       	cp	r18, r24
    25fe:	39 07       	cpc	r19, r25
    2600:	14 f0       	brlt	.+4      	; 0x2606 <dtoa_prf+0x1a0>
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	02 c0       	rjmp	.+4      	; 0x260a <dtoa_prf+0x1a4>
    2606:	12 1b       	sub	r17, r18
    2608:	21 2f       	mov	r18, r17
    260a:	4b 2d       	mov	r20, r11
    260c:	50 e0       	ldi	r21, 0x00	; 0
    260e:	ca 01       	movw	r24, r20
    2610:	80 71       	andi	r24, 0x10	; 16
    2612:	90 70       	andi	r25, 0x00	; 0
    2614:	b4 fc       	sbrc	r11, 4
    2616:	0d c0       	rjmp	.+26     	; 0x2632 <dtoa_prf+0x1cc>
    2618:	b3 fc       	sbrc	r11, 3
    261a:	0b c0       	rjmp	.+22     	; 0x2632 <dtoa_prf+0x1cc>
    261c:	f6 01       	movw	r30, r12
    261e:	32 2f       	mov	r19, r18
    2620:	40 e2       	ldi	r20, 0x20	; 32
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <dtoa_prf+0x1c2>
    2624:	41 93       	st	Z+, r20
    2626:	31 50       	subi	r19, 0x01	; 1
    2628:	33 23       	and	r19, r19
    262a:	e1 f7       	brne	.-8      	; 0x2624 <dtoa_prf+0x1be>
    262c:	c2 0e       	add	r12, r18
    262e:	d1 1c       	adc	r13, r1
    2630:	01 c0       	rjmp	.+2      	; 0x2634 <dtoa_prf+0x1ce>
    2632:	32 2f       	mov	r19, r18
    2634:	aa 23       	and	r26, r26
    2636:	19 f0       	breq	.+6      	; 0x263e <dtoa_prf+0x1d8>
    2638:	f6 01       	movw	r30, r12
    263a:	a1 93       	st	Z+, r26
    263c:	6f 01       	movw	r12, r30
    263e:	89 2b       	or	r24, r25
    2640:	11 f0       	breq	.+4      	; 0x2646 <dtoa_prf+0x1e0>
    2642:	13 2f       	mov	r17, r19
    2644:	0a c0       	rjmp	.+20     	; 0x265a <dtoa_prf+0x1f4>
    2646:	f6 01       	movw	r30, r12
    2648:	13 2f       	mov	r17, r19
    264a:	80 e3       	ldi	r24, 0x30	; 48
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <dtoa_prf+0x1ec>
    264e:	81 93       	st	Z+, r24
    2650:	11 50       	subi	r17, 0x01	; 1
    2652:	11 23       	and	r17, r17
    2654:	e1 f7       	brne	.-8      	; 0x264e <dtoa_prf+0x1e8>
    2656:	c3 0e       	add	r12, r19
    2658:	d1 1c       	adc	r13, r1
    265a:	09 2d       	mov	r16, r9
    265c:	06 0f       	add	r16, r22
    265e:	ba 80       	ldd	r11, Y+2	; 0x02
    2660:	90 e1       	ldi	r25, 0x10	; 16
    2662:	89 2e       	mov	r8, r25
    2664:	91 2c       	mov	r9, r1
    2666:	8e 20       	and	r8, r14
    2668:	9f 20       	and	r9, r15
    266a:	e4 fe       	sbrs	r14, 4
    266c:	04 c0       	rjmp	.+8      	; 0x2676 <dtoa_prf+0x210>
    266e:	f1 e3       	ldi	r31, 0x31	; 49
    2670:	bf 16       	cp	r11, r31
    2672:	09 f4       	brne	.+2      	; 0x2676 <dtoa_prf+0x210>
    2674:	01 50       	subi	r16, 0x01	; 1
    2676:	10 16       	cp	r1, r16
    2678:	14 f0       	brlt	.+4      	; 0x267e <dtoa_prf+0x218>
    267a:	01 e0       	ldi	r16, 0x01	; 1
    267c:	03 c0       	rjmp	.+6      	; 0x2684 <dtoa_prf+0x21e>
    267e:	09 30       	cpi	r16, 0x09	; 9
    2680:	08 f0       	brcs	.+2      	; 0x2684 <dtoa_prf+0x21e>
    2682:	08 e0       	ldi	r16, 0x08	; 8
    2684:	9b 01       	movw	r18, r22
    2686:	77 ff       	sbrs	r23, 7
    2688:	02 c0       	rjmp	.+4      	; 0x268e <dtoa_prf+0x228>
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	cb 01       	movw	r24, r22
    2690:	01 96       	adiw	r24, 0x01	; 1
    2692:	82 1b       	sub	r24, r18
    2694:	93 0b       	sbc	r25, r19
    2696:	fe 01       	movw	r30, r28
    2698:	31 96       	adiw	r30, 0x01	; 1
    269a:	e8 0f       	add	r30, r24
    269c:	f9 1f       	adc	r31, r25
    269e:	8e e2       	ldi	r24, 0x2E	; 46
    26a0:	f8 2e       	mov	r15, r24
    26a2:	3b 01       	movw	r6, r22
    26a4:	60 1a       	sub	r6, r16
    26a6:	71 08       	sbc	r7, r1
    26a8:	8a 2d       	mov	r24, r10
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	44 27       	eor	r20, r20
    26ae:	55 27       	eor	r21, r21
    26b0:	48 1b       	sub	r20, r24
    26b2:	59 0b       	sbc	r21, r25
    26b4:	8f ef       	ldi	r24, 0xFF	; 255
    26b6:	2f 3f       	cpi	r18, 0xFF	; 255
    26b8:	38 07       	cpc	r19, r24
    26ba:	19 f4       	brne	.+6      	; 0x26c2 <dtoa_prf+0x25c>
    26bc:	d6 01       	movw	r26, r12
    26be:	fd 92       	st	X+, r15
    26c0:	6d 01       	movw	r12, r26
    26c2:	62 17       	cp	r22, r18
    26c4:	73 07       	cpc	r23, r19
    26c6:	2c f0       	brlt	.+10     	; 0x26d2 <dtoa_prf+0x26c>
    26c8:	62 16       	cp	r6, r18
    26ca:	73 06       	cpc	r7, r19
    26cc:	14 f4       	brge	.+4      	; 0x26d2 <dtoa_prf+0x26c>
    26ce:	80 81       	ld	r24, Z
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <dtoa_prf+0x26e>
    26d2:	80 e3       	ldi	r24, 0x30	; 48
    26d4:	21 50       	subi	r18, 0x01	; 1
    26d6:	30 40       	sbci	r19, 0x00	; 0
    26d8:	31 96       	adiw	r30, 0x01	; 1
    26da:	24 17       	cp	r18, r20
    26dc:	35 07       	cpc	r19, r21
    26de:	24 f0       	brlt	.+8      	; 0x26e8 <dtoa_prf+0x282>
    26e0:	d6 01       	movw	r26, r12
    26e2:	8d 93       	st	X+, r24
    26e4:	6d 01       	movw	r12, r26
    26e6:	e6 cf       	rjmp	.-52     	; 0x26b4 <dtoa_prf+0x24e>
    26e8:	26 17       	cp	r18, r22
    26ea:	37 07       	cpc	r19, r23
    26ec:	49 f4       	brne	.+18     	; 0x2700 <dtoa_prf+0x29a>
    26ee:	b5 e3       	ldi	r27, 0x35	; 53
    26f0:	bb 15       	cp	r27, r11
    26f2:	28 f0       	brcs	.+10     	; 0x26fe <dtoa_prf+0x298>
    26f4:	bb 16       	cp	r11, r27
    26f6:	21 f4       	brne	.+8      	; 0x2700 <dtoa_prf+0x29a>
    26f8:	81 14       	cp	r8, r1
    26fa:	91 04       	cpc	r9, r1
    26fc:	09 f4       	brne	.+2      	; 0x2700 <dtoa_prf+0x29a>
    26fe:	81 e3       	ldi	r24, 0x31	; 49
    2700:	f6 01       	movw	r30, r12
    2702:	81 93       	st	Z+, r24
    2704:	d6 01       	movw	r26, r12
    2706:	81 2f       	mov	r24, r17
    2708:	90 e2       	ldi	r25, 0x20	; 32
    270a:	02 c0       	rjmp	.+4      	; 0x2710 <dtoa_prf+0x2aa>
    270c:	9c 93       	st	X, r25
    270e:	81 50       	subi	r24, 0x01	; 1
    2710:	11 96       	adiw	r26, 0x01	; 1
    2712:	88 23       	and	r24, r24
    2714:	d9 f7       	brne	.-10     	; 0x270c <dtoa_prf+0x2a6>
    2716:	e1 0f       	add	r30, r17
    2718:	f1 1d       	adc	r31, r1
    271a:	10 82       	st	Z, r1
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	c9 01       	movw	r24, r18
    2722:	29 96       	adiw	r28, 0x09	; 9
    2724:	ee e0       	ldi	r30, 0x0E	; 14
    2726:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <__epilogue_restores__+0x8>

0000272a <__ftoa_engine>:
    272a:	28 30       	cpi	r18, 0x08	; 8
    272c:	08 f0       	brcs	.+2      	; 0x2730 <__ftoa_engine+0x6>
    272e:	27 e0       	ldi	r18, 0x07	; 7
    2730:	33 27       	eor	r19, r19
    2732:	da 01       	movw	r26, r20
    2734:	99 0f       	add	r25, r25
    2736:	31 1d       	adc	r19, r1
    2738:	87 fd       	sbrc	r24, 7
    273a:	91 60       	ori	r25, 0x01	; 1
    273c:	00 96       	adiw	r24, 0x00	; 0
    273e:	61 05       	cpc	r22, r1
    2740:	71 05       	cpc	r23, r1
    2742:	39 f4       	brne	.+14     	; 0x2752 <__ftoa_engine+0x28>
    2744:	32 60       	ori	r19, 0x02	; 2
    2746:	2e 5f       	subi	r18, 0xFE	; 254
    2748:	3d 93       	st	X+, r19
    274a:	30 e3       	ldi	r19, 0x30	; 48
    274c:	2a 95       	dec	r18
    274e:	e1 f7       	brne	.-8      	; 0x2748 <__ftoa_engine+0x1e>
    2750:	08 95       	ret
    2752:	9f 3f       	cpi	r25, 0xFF	; 255
    2754:	30 f0       	brcs	.+12     	; 0x2762 <__ftoa_engine+0x38>
    2756:	80 38       	cpi	r24, 0x80	; 128
    2758:	71 05       	cpc	r23, r1
    275a:	61 05       	cpc	r22, r1
    275c:	09 f0       	breq	.+2      	; 0x2760 <__ftoa_engine+0x36>
    275e:	3c 5f       	subi	r19, 0xFC	; 252
    2760:	3c 5f       	subi	r19, 0xFC	; 252
    2762:	3d 93       	st	X+, r19
    2764:	91 30       	cpi	r25, 0x01	; 1
    2766:	08 f0       	brcs	.+2      	; 0x276a <__ftoa_engine+0x40>
    2768:	80 68       	ori	r24, 0x80	; 128
    276a:	91 1d       	adc	r25, r1
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	1f 93       	push	r17
    2772:	0f 93       	push	r16
    2774:	ff 92       	push	r15
    2776:	ef 92       	push	r14
    2778:	19 2f       	mov	r17, r25
    277a:	98 7f       	andi	r25, 0xF8	; 248
    277c:	96 95       	lsr	r25
    277e:	e9 2f       	mov	r30, r25
    2780:	96 95       	lsr	r25
    2782:	96 95       	lsr	r25
    2784:	e9 0f       	add	r30, r25
    2786:	ff 27       	eor	r31, r31
    2788:	e2 55       	subi	r30, 0x52	; 82
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	99 27       	eor	r25, r25
    278e:	33 27       	eor	r19, r19
    2790:	ee 24       	eor	r14, r14
    2792:	ff 24       	eor	r15, r15
    2794:	a7 01       	movw	r20, r14
    2796:	e7 01       	movw	r28, r14
    2798:	05 90       	lpm	r0, Z+
    279a:	08 94       	sec
    279c:	07 94       	ror	r0
    279e:	28 f4       	brcc	.+10     	; 0x27aa <__ftoa_engine+0x80>
    27a0:	36 0f       	add	r19, r22
    27a2:	e7 1e       	adc	r14, r23
    27a4:	f8 1e       	adc	r15, r24
    27a6:	49 1f       	adc	r20, r25
    27a8:	51 1d       	adc	r21, r1
    27aa:	66 0f       	add	r22, r22
    27ac:	77 1f       	adc	r23, r23
    27ae:	88 1f       	adc	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	06 94       	lsr	r0
    27b4:	a1 f7       	brne	.-24     	; 0x279e <__ftoa_engine+0x74>
    27b6:	05 90       	lpm	r0, Z+
    27b8:	07 94       	ror	r0
    27ba:	28 f4       	brcc	.+10     	; 0x27c6 <__ftoa_engine+0x9c>
    27bc:	e7 0e       	add	r14, r23
    27be:	f8 1e       	adc	r15, r24
    27c0:	49 1f       	adc	r20, r25
    27c2:	56 1f       	adc	r21, r22
    27c4:	c1 1d       	adc	r28, r1
    27c6:	77 0f       	add	r23, r23
    27c8:	88 1f       	adc	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	66 1f       	adc	r22, r22
    27ce:	06 94       	lsr	r0
    27d0:	a1 f7       	brne	.-24     	; 0x27ba <__ftoa_engine+0x90>
    27d2:	05 90       	lpm	r0, Z+
    27d4:	07 94       	ror	r0
    27d6:	28 f4       	brcc	.+10     	; 0x27e2 <__ftoa_engine+0xb8>
    27d8:	f8 0e       	add	r15, r24
    27da:	49 1f       	adc	r20, r25
    27dc:	56 1f       	adc	r21, r22
    27de:	c7 1f       	adc	r28, r23
    27e0:	d1 1d       	adc	r29, r1
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	66 1f       	adc	r22, r22
    27e8:	77 1f       	adc	r23, r23
    27ea:	06 94       	lsr	r0
    27ec:	a1 f7       	brne	.-24     	; 0x27d6 <__ftoa_engine+0xac>
    27ee:	05 90       	lpm	r0, Z+
    27f0:	07 94       	ror	r0
    27f2:	20 f4       	brcc	.+8      	; 0x27fc <__ftoa_engine+0xd2>
    27f4:	49 0f       	add	r20, r25
    27f6:	56 1f       	adc	r21, r22
    27f8:	c7 1f       	adc	r28, r23
    27fa:	d8 1f       	adc	r29, r24
    27fc:	99 0f       	add	r25, r25
    27fe:	66 1f       	adc	r22, r22
    2800:	77 1f       	adc	r23, r23
    2802:	88 1f       	adc	r24, r24
    2804:	06 94       	lsr	r0
    2806:	a9 f7       	brne	.-22     	; 0x27f2 <__ftoa_engine+0xc8>
    2808:	84 91       	lpm	r24, Z+
    280a:	10 95       	com	r17
    280c:	17 70       	andi	r17, 0x07	; 7
    280e:	41 f0       	breq	.+16     	; 0x2820 <__ftoa_engine+0xf6>
    2810:	d6 95       	lsr	r29
    2812:	c7 95       	ror	r28
    2814:	57 95       	ror	r21
    2816:	47 95       	ror	r20
    2818:	f7 94       	ror	r15
    281a:	e7 94       	ror	r14
    281c:	1a 95       	dec	r17
    281e:	c1 f7       	brne	.-16     	; 0x2810 <__ftoa_engine+0xe6>
    2820:	e4 e5       	ldi	r30, 0x54	; 84
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	68 94       	set
    2826:	15 90       	lpm	r1, Z+
    2828:	15 91       	lpm	r17, Z+
    282a:	35 91       	lpm	r19, Z+
    282c:	65 91       	lpm	r22, Z+
    282e:	95 91       	lpm	r25, Z+
    2830:	05 90       	lpm	r0, Z+
    2832:	7f e2       	ldi	r23, 0x2F	; 47
    2834:	73 95       	inc	r23
    2836:	e1 18       	sub	r14, r1
    2838:	f1 0a       	sbc	r15, r17
    283a:	43 0b       	sbc	r20, r19
    283c:	56 0b       	sbc	r21, r22
    283e:	c9 0b       	sbc	r28, r25
    2840:	d0 09       	sbc	r29, r0
    2842:	c0 f7       	brcc	.-16     	; 0x2834 <__ftoa_engine+0x10a>
    2844:	e1 0c       	add	r14, r1
    2846:	f1 1e       	adc	r15, r17
    2848:	43 1f       	adc	r20, r19
    284a:	56 1f       	adc	r21, r22
    284c:	c9 1f       	adc	r28, r25
    284e:	d0 1d       	adc	r29, r0
    2850:	7e f4       	brtc	.+30     	; 0x2870 <__ftoa_engine+0x146>
    2852:	70 33       	cpi	r23, 0x30	; 48
    2854:	11 f4       	brne	.+4      	; 0x285a <__ftoa_engine+0x130>
    2856:	8a 95       	dec	r24
    2858:	e6 cf       	rjmp	.-52     	; 0x2826 <__ftoa_engine+0xfc>
    285a:	e8 94       	clt
    285c:	01 50       	subi	r16, 0x01	; 1
    285e:	30 f0       	brcs	.+12     	; 0x286c <__ftoa_engine+0x142>
    2860:	08 0f       	add	r16, r24
    2862:	0a f4       	brpl	.+2      	; 0x2866 <__ftoa_engine+0x13c>
    2864:	00 27       	eor	r16, r16
    2866:	02 17       	cp	r16, r18
    2868:	08 f4       	brcc	.+2      	; 0x286c <__ftoa_engine+0x142>
    286a:	20 2f       	mov	r18, r16
    286c:	23 95       	inc	r18
    286e:	02 2f       	mov	r16, r18
    2870:	7a 33       	cpi	r23, 0x3A	; 58
    2872:	28 f0       	brcs	.+10     	; 0x287e <__ftoa_engine+0x154>
    2874:	79 e3       	ldi	r23, 0x39	; 57
    2876:	7d 93       	st	X+, r23
    2878:	2a 95       	dec	r18
    287a:	e9 f7       	brne	.-6      	; 0x2876 <__ftoa_engine+0x14c>
    287c:	10 c0       	rjmp	.+32     	; 0x289e <__ftoa_engine+0x174>
    287e:	7d 93       	st	X+, r23
    2880:	2a 95       	dec	r18
    2882:	89 f6       	brne	.-94     	; 0x2826 <__ftoa_engine+0xfc>
    2884:	06 94       	lsr	r0
    2886:	97 95       	ror	r25
    2888:	67 95       	ror	r22
    288a:	37 95       	ror	r19
    288c:	17 95       	ror	r17
    288e:	17 94       	ror	r1
    2890:	e1 18       	sub	r14, r1
    2892:	f1 0a       	sbc	r15, r17
    2894:	43 0b       	sbc	r20, r19
    2896:	56 0b       	sbc	r21, r22
    2898:	c9 0b       	sbc	r28, r25
    289a:	d0 09       	sbc	r29, r0
    289c:	98 f0       	brcs	.+38     	; 0x28c4 <__ftoa_engine+0x19a>
    289e:	23 95       	inc	r18
    28a0:	7e 91       	ld	r23, -X
    28a2:	73 95       	inc	r23
    28a4:	7a 33       	cpi	r23, 0x3A	; 58
    28a6:	08 f0       	brcs	.+2      	; 0x28aa <__ftoa_engine+0x180>
    28a8:	70 e3       	ldi	r23, 0x30	; 48
    28aa:	7c 93       	st	X, r23
    28ac:	20 13       	cpse	r18, r16
    28ae:	b8 f7       	brcc	.-18     	; 0x289e <__ftoa_engine+0x174>
    28b0:	7e 91       	ld	r23, -X
    28b2:	70 61       	ori	r23, 0x10	; 16
    28b4:	7d 93       	st	X+, r23
    28b6:	30 f0       	brcs	.+12     	; 0x28c4 <__ftoa_engine+0x19a>
    28b8:	83 95       	inc	r24
    28ba:	71 e3       	ldi	r23, 0x31	; 49
    28bc:	7d 93       	st	X+, r23
    28be:	70 e3       	ldi	r23, 0x30	; 48
    28c0:	2a 95       	dec	r18
    28c2:	e1 f7       	brne	.-8      	; 0x28bc <__ftoa_engine+0x192>
    28c4:	11 24       	eor	r1, r1
    28c6:	ef 90       	pop	r14
    28c8:	ff 90       	pop	r15
    28ca:	0f 91       	pop	r16
    28cc:	1f 91       	pop	r17
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	99 27       	eor	r25, r25
    28d4:	87 fd       	sbrc	r24, 7
    28d6:	90 95       	com	r25
    28d8:	08 95       	ret

000028da <strrev>:
    28da:	dc 01       	movw	r26, r24
    28dc:	fc 01       	movw	r30, r24
    28de:	67 2f       	mov	r22, r23
    28e0:	71 91       	ld	r23, Z+
    28e2:	77 23       	and	r23, r23
    28e4:	e1 f7       	brne	.-8      	; 0x28de <strrev+0x4>
    28e6:	32 97       	sbiw	r30, 0x02	; 2
    28e8:	04 c0       	rjmp	.+8      	; 0x28f2 <strrev+0x18>
    28ea:	7c 91       	ld	r23, X
    28ec:	6d 93       	st	X+, r22
    28ee:	70 83       	st	Z, r23
    28f0:	62 91       	ld	r22, -Z
    28f2:	ae 17       	cp	r26, r30
    28f4:	bf 07       	cpc	r27, r31
    28f6:	c8 f3       	brcs	.-14     	; 0x28ea <strrev+0x10>
    28f8:	08 95       	ret

000028fa <_exit>:
    28fa:	f8 94       	cli

000028fc <__stop_program>:
    28fc:	ff cf       	rjmp	.-2      	; 0x28fc <__stop_program>
